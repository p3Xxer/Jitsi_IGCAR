import { ComponentType } from 'react';
import { CssFunction, BasicTemplateInterpolations } from '../types';
export interface FunctionIterpolation<TProps> {
    (props: TProps): string | number | undefined;
}
/**
 * Typing for the CSS object.
 */
export declare type CssObject<TProps> = CssFunction<FunctionIterpolation<TProps>>;
/**
 * Extra props added to the output Styled Component.
 */
export interface StyledProps {
    as?: keyof JSX.IntrinsicElements;
}
export declare type Interpolations<TProps extends unknown> = (BasicTemplateInterpolations | FunctionIterpolation<TProps> | CssObject<TProps> | CssObject<TProps>[])[];
/**
 * This allows us to take the generic `TTag` (that will be a valid `DOM` tag) and then use it to
 * define correct props based on it from `JSX.IntrinsicElements`, while also injecting our own
 * props from `StyledProps`.
 */
export interface StyledFunctionFromTag<TTag extends keyof JSX.IntrinsicElements> {
    <TProps extends unknown>(css: CssObject<TProps> | CssObject<TProps>[], ...interpoltations: Interpolations<TProps>): React.ComponentType<TProps & JSX.IntrinsicElements[TTag] & StyledProps>;
}
export interface StyledFunctionFromComponent<TInheritedProps extends unknown> {
    <TProps extends unknown>(css: CssObject<TProps> | TemplateStringsArray, ...interpoltations: Interpolations<TProps>): React.ComponentType<TProps & StyledProps & TInheritedProps>;
}
export declare type StyledComponentMap = {
    [Tag in keyof JSX.IntrinsicElements]: StyledFunctionFromTag<Tag>;
};
export interface StyledComponentInstantiator extends StyledComponentMap {
    /**
     * Typing to enable consumers to compose components, e.g: `styled(Component)`
     */
    <TInheritedProps extends unknown>(Component: ComponentType<TInheritedProps>): StyledFunctionFromComponent<TInheritedProps>;
}
/**
 * Use `styled` to create a component that has styles tied to an element which comes with built-in behavior such as `ref` and `as` prop support.
 *
 * ```
 * styled.div`font-size: 12px`; // Template literal CSS
 * styled.div({ fontSize: 12 }); // Object CSS
 * styled.div([{ fontSize: 12 }, `font-size: 12px;`]) // Array CSS
 * styled.div({ fontSize: 12 }, `font-size: 12px`) Multi arguments CSS
 * ```
 *
 * For more help, read the docs:
 * https://compiledcssinjs.com/docs/styled
 */
export declare const styled: StyledComponentInstantiator;
