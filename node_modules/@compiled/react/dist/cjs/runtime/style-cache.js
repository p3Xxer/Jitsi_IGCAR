"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.useCache = void 0;
var React = __importStar(require("react"));
var react_1 = require("react");
var is_node_1 = require("./is-node");
/**
 * Cache to hold already used styles.
 * React Context on the server - singleton object on the client.
 */
var Cache = is_node_1.isNodeEnvironment() ? react_1.createContext(null) : {};
if (!is_node_1.isNodeEnvironment()) {
    /**
     * Iterates through all found style elements generated when server side rendering.
     *
     * @param cb
     */
    var ssrStyles = document.querySelectorAll('style[data-cmpld]');
    for (var i = 0; i < ssrStyles.length; i++) {
        // Move all found server-side rendered style elements to the head before React hydration happens.
        document.head.appendChild(ssrStyles[i]);
    }
}
/**
 * Hook using the cache created on the server or client.
 */
var useCache = function () {
    if (is_node_1.isNodeEnvironment()) {
        // On the server we use React Context to we don't leak the cache between SSR calls.
        // During runtime this hook isn't conditionally called - it is at build time that the flow gets decided.
        // eslint-disable-next-line react-hooks/rules-of-hooks
        return react_1.useContext(Cache) || {};
    }
    // On the client we use the object singleton.
    return Cache;
};
exports.useCache = useCache;
/**
 * On the server this ensures the minimal amount of styles will be rendered
 * safely using React Context.
 *
 * On the browser this turns into a fragment with no React Context.
 */
var StyleCacheProvider = function (props) {
    if (is_node_1.isNodeEnvironment()) {
        // This code path isn't conditionally called at build time - safe to ignore.
        // eslint-disable-next-line react-hooks/rules-of-hooks
        var inserted = exports.useCache();
        return React.createElement(Cache.Provider, { value: inserted }, props.children);
    }
    return props.children;
};
exports.default = StyleCacheProvider;
//# sourceMappingURL=style-cache.js.map