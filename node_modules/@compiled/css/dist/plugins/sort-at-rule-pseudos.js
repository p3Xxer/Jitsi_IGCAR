"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.sortAtRulePseudos = void 0;
var postcss_1 = require("postcss");
/**
 * Ordered style buckets using the long psuedo selector.
 * If changes make sure that it aligns with the definition in `sheet.tsx`.
 */
var pseudoClassesInOrder = [
    ':link',
    ':visited',
    ':focus-within',
    ':focus',
    ':focus-visible',
    ':hover',
    ':active',
];
var getPseudoClassScore = function (selector) {
    var index = pseudoClassesInOrder.findIndex(function (pseudoClass) {
        return selector.trim().endsWith(pseudoClass);
    });
    return index + 1;
};
var sortPseudoClasses = function (atRule) {
    var rules = [];
    atRule.each(function (childNode) {
        switch (childNode.type) {
            case 'atrule':
                sortPseudoClasses(childNode);
                break;
            case 'rule':
                rules.push(childNode.clone());
                childNode.remove();
                break;
            default:
                break;
        }
    });
    rules
        .sort(function (rule1, rule2) {
        var selector1 = rule1.selectors.length ? rule1.selectors[0] : rule1.selector;
        var selector2 = rule2.selectors.length ? rule2.selectors[0] : rule2.selector;
        return getPseudoClassScore(selector1) - getPseudoClassScore(selector2);
    })
        .forEach(function (rule) {
        atRule.append(rule);
    });
};
/**
 * PostCSS plugin for sorting rules inside AtRules based on lvfha ordering.
 */
exports.sortAtRulePseudos = postcss_1.plugin('sort-at-rule-pseudos', function () {
    return function (root) {
        root.each(function (node) {
            switch (node.type) {
                case 'atrule':
                    sortPseudoClasses(node);
                    break;
                default:
                    break;
            }
        });
    };
});
//# sourceMappingURL=sort-at-rule-pseudos.js.map