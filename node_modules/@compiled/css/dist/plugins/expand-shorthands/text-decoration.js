"use strict";
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.textDecoration = void 0;
var utils_1 = require("./utils");
/**
 * https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration
 */
var textDecoration = function (value) {
    var _a = value.nodes, left = _a[0], middle = _a[1], right = _a[2];
    var lineValues = __spreadArrays(utils_1.globalValues, ['none', 'underline', 'overline', 'line-through', 'blink']);
    var styleValues = __spreadArrays(utils_1.globalValues, ['solid', 'double', 'dotted', 'dashed', 'wavy']);
    var lineValue = [];
    var colorValue = '';
    var styleValue = '';
    /**
     * Extracts values from a node and mutates variables in scope.
     * If it returns `true` we should bail out and return no nodes.
     *
     * @param node
     */
    var extractValues = function (node) {
        if (node && node.type === 'word') {
            if (lineValues.includes(node.value)) {
                if (lineValue.length === 0 || !lineValue.includes(node.value)) {
                    lineValue.push(node.value);
                }
                else {
                    // Invalid, bail out!
                    return true;
                }
            }
            else if (utils_1.isColor(node)) {
                colorValue = node.value;
            }
            else if (styleValues.includes(node.value)) {
                styleValue = node.value;
            }
        }
        return false;
    };
    if (extractValues(left) || extractValues(middle) || extractValues(right)) {
        return [];
    }
    lineValue.sort(); // Ensure the sorting is always in the same order.
    var resolvedLineValue = lineValue.length ? lineValue.join(' ') : 'none';
    return [
        { prop: 'text-decoration-color', value: colorValue || 'currentColor' },
        { prop: 'text-decoration-line', value: resolvedLineValue },
        { prop: 'text-decoration-style', value: styleValue || 'solid' },
    ];
};
exports.textDecoration = textDecoration;
//# sourceMappingURL=text-decoration.js.map