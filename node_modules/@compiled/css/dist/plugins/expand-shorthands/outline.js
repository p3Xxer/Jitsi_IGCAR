"use strict";
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.outline = void 0;
var utils_1 = require("./utils");
/**
 * https://developer.mozilla.org/en-US/docs/Web/CSS/outline
 */
var outline = function (value) {
    var _a = value.nodes, left = _a[0], middle = _a[1], right = _a[2];
    var styleValues = __spreadArrays(utils_1.globalValues, [
        'auto',
        'none',
        'dotted',
        'dashed',
        'solid',
        'double',
        'groove',
        'ridge',
        'inset',
        'outset',
    ]);
    var sizeValues = ['thin', 'medium', 'thick'];
    var colorValue = '';
    var styleValue = '';
    var widthValue = '';
    /**
     * Extracts values from a node and mutates variables in scope.
     * If it returns `true` we should bail out and return no nodes.
     *
     * @param node
     */
    var extractValues = function (node) {
        if (node && node.type === 'word') {
            if (utils_1.isColor(node)) {
                if (colorValue !== '') {
                    // It has already been set - invalid!
                    return true;
                }
                colorValue = node.value;
            }
            else if (sizeValues.includes(node.value)) {
                if (widthValue !== '') {
                    // It has already been set - invalid!
                    return true;
                }
                widthValue = node.value;
            }
            else if (styleValues.includes(node.value)) {
                if (styleValue !== '') {
                    // It has already been set - invalid!
                    return true;
                }
                styleValue = node.value;
            }
            else {
                // Invalid
                return true;
            }
        }
        else if (node && node.type === 'numeric') {
            if (widthValue !== '') {
                // It has already been set - invalid!
                return true;
            }
            widthValue = node;
        }
        return false;
    };
    if (extractValues(left) || extractValues(middle) || extractValues(right)) {
        return [];
    }
    return [
        { prop: 'outline-color', value: colorValue || 'currentColor' },
        { prop: 'outline-style', value: styleValue || 'none' },
        { prop: 'outline-width', value: widthValue || 'medium' },
    ];
};
exports.outline = outline;
//# sourceMappingURL=outline.js.map