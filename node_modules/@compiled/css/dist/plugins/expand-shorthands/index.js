"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.expandShorthands = void 0;
var postcss_1 = require("postcss");
var postcss_values_parser_1 = require("postcss-values-parser");
var margin_1 = require("./margin");
var padding_1 = require("./padding");
var place_content_1 = require("./place-content");
var place_items_1 = require("./place-items");
var place_self_1 = require("./place-self");
var overflow_1 = require("./overflow");
var flex_1 = require("./flex");
var flex_flow_1 = require("./flex-flow");
var outline_1 = require("./outline");
var text_decoration_1 = require("./text-decoration");
var background_1 = require("./background");
var shorthands = {
    // These properties are fully expanded
    margin: margin_1.margin,
    padding: padding_1.padding,
    'place-content': place_content_1.placeContent,
    'place-items': place_items_1.placeItems,
    'place-self': place_self_1.placeSelf,
    overflow: overflow_1.overflow,
    flex: flex_1.flex,
    'flex-flow': flex_flow_1.flexFlow,
    outline: outline_1.outline,
    'text-decoration': text_decoration_1.textDecoration,
    // These properties are partially expanded
    background: background_1.background,
};
/**
 * PostCSS plugin that expands shortform properties to their longform equivalents.
 */
exports.expandShorthands = postcss_1.plugin('expand-shorthands', function () {
    var filter = new RegExp(Object.keys(shorthands).join('|'));
    return function (root) {
        root.walkDecls(filter, function (decl) {
            var valueNode = postcss_values_parser_1.parse(decl.value);
            var expand = shorthands[decl.prop];
            if (expand) {
                var longforms = expand(valueNode);
                if (!longforms) {
                    throw new Error('Longform properties were not returned!');
                }
                var nodes = longforms.map(function (val) {
                    var newNode = decl.clone(__assign(__assign({}, val), { 
                        // Value needs to be a string else autoprefixer blows up.
                        value: "" + val.value }));
                    return newNode;
                });
                decl.replaceWith(nodes);
            }
        });
    };
});
//# sourceMappingURL=index.js.map