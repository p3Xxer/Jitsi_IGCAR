"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.normalizeCSS = void 0;
var cssnano_preset_default_1 = __importDefault(require("cssnano-preset-default"));
var normalize_current_color_1 = require("./normalize-current-color");
/**
 * These plugins are ran on production builds to ensure the minimal amount of CSS is generated.
 */
var PROD_PLUGINS = [
    // Order CSS declaration values so any combination results in the same atomic rule.
    'postcss-ordered-values',
    // Replace values to equivalent smaller values.
    'postcss-reduce-initial',
    'postcss-convert-values',
    // Normalize color values
    'postcss-colormin',
    // Normalize specific values so they are all equivalent.
    'postcss-normalize-url',
    'postcss-normalize-unicode',
    'postcss-normalize-string',
    'postcss-normalize-positions',
    'postcss-normalize-timing-functions',
    // Make gradients as small as possible.
    'postcss-minify-gradients',
    // Throw away comments
    'postcss-discard-comments',
    // Reduce CSS calc expressions if possible.
    'postcss-calc',
];
/**
 * These plugins are always ran on any run.
 */
var BASE_PLUGINS = [
    // This ensures all selectors are the same even with different white space
    'postcss-minify-selectors',
    // This ensures all at rules are the same even with different white space
    'postcss-minify-params',
];
/**
 * This plugin runs a subset of the cssnao plugins to normalize CSS during build.
 * During a production build it will run more plugins.
 */
var normalizeCSS = function () {
    var preset = cssnano_preset_default_1.default();
    // We exclude async because we need this to run synchronously as ts transformers aren't async!
    var extraPlugins = process.env.NODE_ENV === 'production' ? PROD_PLUGINS : [];
    var pluginsToIncldue = BASE_PLUGINS.concat(extraPlugins);
    var normalizePlugins = preset.plugins
        .map(function (_a) {
        var creator = _a[0];
        // replicate the `initializePlugin` behavior from https://github.com/cssnano/cssnano/blob/a566cc5/packages/cssnano/src/index.js#L8
        return creator();
    })
        .filter(function (plugin) {
        return pluginsToIncldue.includes(plugin.postcssPlugin);
    });
    // These plugins are custom ones that gap functionality not provided by cssmin.
    if (process.env.NODE_ENV === 'production') {
        normalizePlugins.push(normalize_current_color_1.normalizeCurrentColor);
    }
    return normalizePlugins;
};
exports.normalizeCSS = normalizeCSS;
//# sourceMappingURL=normalize-css.js.map