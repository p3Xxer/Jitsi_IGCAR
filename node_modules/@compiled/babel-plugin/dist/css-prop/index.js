"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.visitCssPropPath = void 0;
var t = __importStar(require("@babel/types"));
var ast_builders_1 = require("../utils/ast-builders");
var css_builders_1 = require("../utils/css-builders");
var getJsxAttributeExpression = function (node) {
    if (t.isStringLiteral(node.value)) {
        return node.value;
    }
    if (t.isJSXExpressionContainer(node.value)) {
        return node.value.expression;
    }
    throw new Error('Value of JSX attribute was unexpected.');
};
/**
 * Takes a JSX opening element and then transforms any usage of `css` prop to a compiled component.
 *
 * `<div css={{}}>`
 *
 * @param path Babel path - expects to be a JSX opening element.
 * @param state Babel state - should house options and meta data used during the transformation.
 */
var visitCssPropPath = function (path, meta) {
    var cssPropIndex = -1;
    var cssProp = path.node.attributes.find(function (attr, index) {
        if (t.isJSXAttribute(attr) && attr.name.name === 'css') {
            cssPropIndex = index;
            return true;
        }
        return false;
    });
    if (!cssProp || !cssProp.value) {
        return;
    }
    var cssOutput = css_builders_1.buildCss(getJsxAttributeExpression(cssProp), meta);
    // Remove css prop
    path.node.attributes.splice(cssPropIndex, 1);
    if (!cssOutput.css.length) {
        // No css was generated - return early!
        return;
    }
    path.parentPath.replaceWith(ast_builders_1.buildCompiledComponent(path.parentPath.node, cssOutput, meta));
};
exports.visitCssPropPath = visitCssPropPath;
//# sourceMappingURL=index.js.map