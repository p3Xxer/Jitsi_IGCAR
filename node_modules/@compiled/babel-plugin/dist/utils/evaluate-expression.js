"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.evaluateExpression = void 0;
var t = __importStar(require("@babel/types"));
var traverse_1 = __importDefault(require("@babel/traverse"));
var ast_1 = require("./ast");
var createResultPair = function (value, meta) { return ({
    value: value,
    meta: meta,
}); };
/**
 * Will look in an expression and return the actual value along with updated metadata.
 *
 * E.g: If there is an identifier called `color` that is set somewhere as `const color = 'blue'`,
 * passing the `color` identifier to this function would return `'blue'`.
 *
 * @param expression Expression we want to interrogate.
 * @param state Babel state - should house options and meta data used during the transformation.
 */
var traverseIdentifier = function (expression, meta) {
    var _a;
    var value = undefined;
    var updatedMeta = meta;
    var resolvedBinding = ast_1.resolveBindingNode(expression.name, updatedMeta);
    if (resolvedBinding && resolvedBinding.constant) {
        // We recursively call get interpolation until it not longer returns an identifier or member expression
        (_a = exports.evaluateExpression(resolvedBinding.node, resolvedBinding.meta), value = _a.value, updatedMeta = _a.meta);
    }
    return createResultPair(value, updatedMeta);
};
/**
 * Will evaluate object values recursively and return the actual value along with updated metadata.
 *
 * E.g: If there is an object expression `{ x: () => 10 }`, it will evaluate and
 * return `value` as `10`.
 * @param expression Expression we want to interrogate.
 * @param accessPath An array of nested object keys
 * @param meta Meta data used during the transformation.
 */
var evaluateObjectExpression = function (expression, accessPath, meta) {
    var _a;
    var value = expression;
    var updatedMeta = meta;
    if (t.isObjectExpression(expression)) {
        var objectValue = ast_1.getValueFromObjectExpression(expression, accessPath);
        (_a = exports.evaluateExpression(objectValue, updatedMeta), value = _a.value, updatedMeta = _a.meta);
    }
    return createResultPair(value, updatedMeta);
};
/**
 * Will look in an expression and return the actual value along with updated metadata.
 *
 * E.g: If there is a member expression called `colors().primary` that has identifier `colors` which
 * is set somewhere as `const colors = () => ({ primary: 'blue' })`,
 * passing the `colors` identifier to this function would return `'blue'`.
 *
 * @param expression Expression we want to interrogate.
 * @param accessPath An array of nested object keys
 * @param meta Meta data used during the transformation.
 */
var evaluateCallExpressionBindingMemberExpression = function (expression, accessPath, meta) {
    var _a, _b;
    var value = expression;
    var updatedMeta = meta;
    if (t.isFunction(expression)) {
        (_a = exports.evaluateExpression(expression, meta), value = _a.value, updatedMeta = _a.meta);
        (_b = evaluateObjectExpression(value, accessPath, updatedMeta), value = _b.value, updatedMeta = _b.meta);
    }
    return createResultPair(value, updatedMeta);
};
/**
 * Will look in an expression and return the actual value along with updated metadata.
 *
 * E.g:
 * 1. If there is a member expression called `colors.primary` that has identifier `colors` which
 * is set somewhere as `const colors = { primary: 'blue' }`,
 * passing the `colors` identifier to this function would return `'blue'`.
 *
 * 2. If there is a member expression called `colors.primary` that has identifier `colors` which
 * is set somewhere as `const colors = colorMixin();` calling another identifier
 * `const colorMixin = () => ({ primary: 'blue' })`, passing the `colors` identifier
 * to this function would return `'blue'`.
 *
 * @param expression Expression we want to interrogate.
 * @param accessPath An array of nested object keys
 * @param meta Meta data used during the transformation.
 */
var evaluateIdentifierBindingMemberExpression = function (expression, accessPath, meta) {
    var _a, _b, _c;
    var value = expression;
    var updatedMeta = meta;
    if (t.isObjectExpression(expression)) {
        (_a = evaluateObjectExpression(expression, accessPath, meta), value = _a.value, updatedMeta = _a.meta);
    }
    else if (t.isCallExpression(expression) && t.isExpression(expression.callee)) {
        (_b = exports.evaluateExpression(expression.callee, meta), value = _b.value, updatedMeta = _b.meta);
        (_c = evaluateObjectExpression(value, accessPath, updatedMeta), value = _c.value, updatedMeta = _c.meta);
    }
    return createResultPair(value, updatedMeta);
};
/**
 * Will look in an expression and return the actual value along with updated metadata.
 *
 * E.g: If there is a member expression called `colors.primary` that has identifier `color` which
 * is set somewhere as `const colors = { primary: 'blue' }`,
 * passing the `colors` identifier to this function would return `'blue'`.
 *
 * @param expression Expression we want to interrogate.
 * @param state Babel state - should house options and meta data used during the transformation.
 */
var traverseMemberExpression = function (expression, meta) {
    var _a, _b;
    var value = undefined;
    var updatedMeta = meta;
    var _c = ast_1.getMemberExpressionMeta(expression), accessPath = _c.accessPath, bindingIdentifier = _c.bindingIdentifier, originalBindingType = _c.originalBindingType;
    if (bindingIdentifier) {
        var resolvedBinding = ast_1.resolveBindingNode(bindingIdentifier.name, updatedMeta);
        if (resolvedBinding && resolvedBinding.constant && t.isExpression(resolvedBinding.node)) {
            if (originalBindingType === 'Identifier') {
                (_a = evaluateIdentifierBindingMemberExpression(resolvedBinding.node, accessPath, resolvedBinding.meta), value = _a.value, updatedMeta = _a.meta);
            }
            else if (originalBindingType === 'CallExpression') {
                (_b = evaluateCallExpressionBindingMemberExpression(resolvedBinding.node, accessPath, resolvedBinding.meta), value = _b.value, updatedMeta = _b.meta);
            }
        }
    }
    return createResultPair(value, updatedMeta);
};
/**
 * Will look in an expression and return the actual value along with updated metadata.
 *
 * E.g: If there was a function called `size` that is set somewhere as
 * `const size = () => 10` or `const size = function() { return 10; }` or `function size() { return 10; }`,
 * passing the `size` identifier to this function would return `10` (it will recursively evaluate).
 *
 * @param expression Expression we want to interrogate.
 * @param state Babel state - should house options and meta data used during the transformation.
 */
var traverseFunction = function (expression, meta) {
    var _a;
    var value = undefined;
    var updatedMeta = meta;
    if (t.isBlockStatement(expression.body)) {
        traverse_1.default(expression.body, {
            noScope: true,
            ReturnStatement: function (path) {
                var _a;
                var argument = path.node.argument;
                if (argument) {
                    (_a = exports.evaluateExpression(argument, meta), value = _a.value, updatedMeta = _a.meta);
                }
                path.stop();
            },
        });
    }
    else {
        (_a = exports.evaluateExpression(expression.body, meta), value = _a.value, updatedMeta = _a.meta);
    }
    return createResultPair(value, updatedMeta);
};
/**
 * Will look in an expression and return the actual value along with updated metadata.
 * If the expression is an identifier node (a variable) and a constant,
 * it will return the variable reference.
 *
 * E.g: If there was a identifier called `color` that is set somewhere as `const color = 'blue'`,
 * passing the `color` identifier to this function would return `'blue'`.
 *
 * This behaviour is the same for const string & numeric literals,
 * and object expressions.
 *
 * @param expression Expression we want to interrogate.
 * @param state Babel state - should house options and meta data used during the transformation.
 */
var evaluateExpression = function (expression, meta) {
    var _a, _b, _c, _d;
    var value = undefined;
    var updatedMeta = meta;
    if (t.isIdentifier(expression)) {
        (_a = traverseIdentifier(expression, updatedMeta), value = _a.value, updatedMeta = _a.meta);
    }
    else if (t.isMemberExpression(expression)) {
        (_b = traverseMemberExpression(expression, updatedMeta), value = _b.value, updatedMeta = _b.meta);
    }
    else if (t.isFunction(expression)) {
        (_c = traverseFunction(expression, updatedMeta), value = _c.value, updatedMeta = _c.meta);
    }
    else if (t.isCallExpression(expression) && t.isExpression(expression.callee)) {
        (_d = exports.evaluateExpression(expression.callee, updatedMeta), value = _d.value, updatedMeta = _d.meta);
    }
    if (t.isStringLiteral(value) || t.isNumericLiteral(value) || t.isObjectExpression(value)) {
        return createResultPair(value, updatedMeta);
    }
    // --------------
    // NOTE: We are recursively calling evaluateExpression() which is then going to try and evaluate it
    // multiple times. This may or may not be a performance problem - when looking for quick wins perhaps
    // there is something we could do better here.
    // --------------
    if (value) {
        return createResultPair(ast_1.tryEvaluateExpression(value, updatedMeta, expression), updatedMeta);
    }
    return createResultPair(ast_1.tryEvaluateExpression(expression, updatedMeta), updatedMeta);
};
exports.evaluateExpression = evaluateExpression;
//# sourceMappingURL=evaluate-expression.js.map