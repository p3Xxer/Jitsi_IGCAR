"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Cache = void 0;
var utils_1 = require("@compiled/utils");
var defaultOptions = {
    cache: true,
    maxSize: 500,
};
var Cache = /** @class */ (function () {
    function Cache() {
        this._options = defaultOptions;
        // TODO: Replace `this._instanceKey` with `this.#instanceKey` once we upgrade to typescript >= 3.8
        this._cache = new Map();
    }
    /**
     * Returns hash of `cacheKey` and `namespace` if `namespace` is present
     * otherwise returns hash of `cacheKey` only.
     *
     * @param cacheKey Key for caching
     * @param namespace Namespace for grouping
     */
    Cache.getUniqueKey = function (cacheKey, namespace) {
        return utils_1.hash(namespace ? namespace + "----" + cacheKey : cacheKey);
    };
    /**
     * Lazy evaluates the passed value and save it into the cache.
     * Also returns the lazy evaluated value.
     *
     * @param uniqueKey Unique cache key
     * @param value Value to be cached
     */
    Cache.prototype._saveToCache = function (uniqueKey, value) {
        var lazyValue = value();
        this._cache.set(uniqueKey, lazyValue);
        return lazyValue;
    };
    /**
     * Deletes least recently used value (first in queue) from cache if cache size
     * reaches its max size.
     */
    Cache.prototype._tryDeletingLRUCachedValue = function () {
        if (this._cache.size >= this._options.maxSize) {
            var key = this._cache.keys().next().value;
            this._cache.delete(key);
        }
    };
    /**
     * Moves frequently accessed value last into queue so that they won't get deleted
     * when cache size reaches its max size.
     *
     * @param uniqueKey Unique cache key
     * @param cacheValue Cached value
     */
    Cache.prototype._moveLastInQueue = function (uniqueKey, cacheValue) {
        this._cache.delete(uniqueKey);
        this._cache.set(uniqueKey, cacheValue);
    };
    /**
     * Loads cached value from cache and returns it. Also move it last into queue.
     *
     * @param uniqueKey Unique cache key
     */
    Cache.prototype._loadFromCache = function (uniqueKey) {
        var cacheValue = this._cache.get(uniqueKey);
        this._moveLastInQueue(uniqueKey, cacheValue);
        return cacheValue;
    };
    /**
     * Initialize cache with its options.
     *
     * @param options Cache options
     */
    Cache.prototype.initialize = function (options) {
        this._options = __assign(__assign({}, defaultOptions), options);
    };
    /**
     * Checks if we can cache the value. If not, it will just evaluate the passed
     * value and returns it. If yes, it will start caching it. If value is already
     * cached, returns it otherwise put it into the cache and delete least recently
     * used value if cache is full.
     *
     * @param cacheKey Key for caching
     * @param namespace Namespace for grouping
     * @param value Value to be cached
     */
    Cache.prototype.load = function (_a) {
        var cacheKey = _a.cacheKey, namespace = _a.namespace, _b = _a.value, value = _b === void 0 ? function () { return ({}); } : _b;
        if (!this._options.cache) {
            return value();
        }
        var uniqueKey = Cache.getUniqueKey(cacheKey, namespace);
        if (this._cache.has(uniqueKey)) {
            return this._loadFromCache(uniqueKey);
        }
        this._tryDeletingLRUCachedValue();
        return this._saveToCache(uniqueKey, value);
    };
    /**
     * Returns cache size
     */
    Cache.prototype.getSize = function () {
        return this._cache.size;
    };
    /**
     * Returns cache keys
     */
    Cache.prototype.getKeys = function () {
        return this._cache.keys();
    };
    /**
     * Returns cache values
     */
    Cache.prototype.getValues = function () {
        return this._cache.values();
    };
    return Cache;
}());
exports.Cache = Cache;
//# sourceMappingURL=cache.js.map