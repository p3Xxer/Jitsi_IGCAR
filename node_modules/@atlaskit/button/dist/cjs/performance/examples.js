"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.customThemeButton = exports.button = void 0;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _react = _interopRequireWildcard(require("react"));

var _index = _interopRequireWildcard(require("../index"));

var _react2 = require("@testing-library/react");

// eslint-disable-next-line
function Example(_ref) {
  var Component = _ref.Component;

  var _useState = (0, _react.useState)(false),
      _useState2 = (0, _slicedToArray2.default)(_useState, 2),
      isSelected = _useState2[0],
      setIsSelected = _useState2[1];

  var _useState3 = (0, _react.useState)(false),
      _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
      isDisabled = _useState4[0],
      setIsDisabled = _useState4[1];

  var ref = (0, _react.useRef)(null);
  (0, _react.useLayoutEffect)(function () {
    function toggleSelect() {
      setIsSelected(function (value) {
        return !value;
      });
    }

    function toggleDisabled() {
      setIsDisabled(function (value) {
        return !value;
      });
    }

    var el = ref.current;

    if (!el) {
      throw new Error('Could not find button ref');
    }

    el.addEventListener('toggle-select', toggleSelect);
    el.addEventListener('toggle-disabled', toggleDisabled);
    return function () {
      el.removeEventListener('toggle-select', toggleSelect);
      el.removeEventListener('toggle-disabled', toggleDisabled);
    };
  }, []);
  return (
    /*#__PURE__*/
    // @ts-ignore
    _react.default.createElement(Component, {
      ref: ref,
      testId: "my-button",
      isSelected: isSelected,
      isDisabled: isDisabled,
      "data-is-selected": isSelected
    }, "Hello world")
  );
}

var interactionTasks = [{
  name: 'Click a button',
  description: 'Recording how long a mousedown + click event take to be processed',
  run: function () {
    var _run = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee(_ref2) {
      var container, button;
      return _regenerator.default.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              container = _ref2.container;
              button = container.querySelector('[data-testid="my-button"]');

              if (!(button == null)) {
                _context.next = 4;
                break;
              }

              throw new Error('Could not find button element');

            case 4:
              _react2.fireEvent.mouseDown(button);

              _react2.fireEvent.click(button);

            case 6:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));

    function run(_x) {
      return _run.apply(this, arguments);
    }

    return run;
  }()
}, {
  name: 'Focus on button',
  description: 'Focus on a button and wait for layout and paint to finish',
  run: function () {
    var _run2 = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee3(_ref3) {
      var container, controls, button;
      return _regenerator.default.wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              container = _ref3.container, controls = _ref3.controls;
              button = container.querySelector('[data-testid="my-button"]');

              if (!(button == null)) {
                _context3.next = 4;
                break;
              }

              throw new Error('Could not find button element');

            case 4:
              _context3.next = 6;
              return controls.time( /*#__PURE__*/(0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee2() {
                return _regenerator.default.wrap(function _callee2$(_context2) {
                  while (1) {
                    switch (_context2.prev = _context2.next) {
                      case 0:
                        _react2.fireEvent.focus(button);

                        _react2.fireEvent.blur(button);

                      case 2:
                      case "end":
                        return _context2.stop();
                    }
                  }
                }, _callee2);
              })));

            case 6:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3);
    }));

    function run(_x2) {
      return _run2.apply(this, arguments);
    }

    return run;
  }()
}, {
  name: 'Select button',
  description: 'Trigger the selection of a button',
  run: function () {
    var _run3 = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee5(_ref5) {
      var container, controls, button;
      return _regenerator.default.wrap(function _callee5$(_context5) {
        while (1) {
          switch (_context5.prev = _context5.next) {
            case 0:
              container = _ref5.container, controls = _ref5.controls;
              button = container.querySelector('[data-testid="my-button"]');

              if (!(button == null)) {
                _context5.next = 4;
                break;
              }

              throw new Error('Could not find button element');

            case 4:
              if (!(button.getAttribute('data-is-selected') !== 'false')) {
                _context5.next = 6;
                break;
              }

              throw new Error('Should not start selected');

            case 6:
              _context5.next = 8;
              return controls.time( /*#__PURE__*/(0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee4() {
                return _regenerator.default.wrap(function _callee4$(_context4) {
                  while (1) {
                    switch (_context4.prev = _context4.next) {
                      case 0:
                        (0, _react2.fireEvent)(button, new Event('toggle-select'));

                      case 1:
                      case "end":
                        return _context4.stop();
                    }
                  }
                }, _callee4);
              })));

            case 8:
              if (!(button.getAttribute('data-is-selected') !== 'true')) {
                _context5.next = 10;
                break;
              }

              throw new Error('Should now be selected');

            case 10:
            case "end":
              return _context5.stop();
          }
        }
      }, _callee5);
    }));

    function run(_x3) {
      return _run3.apply(this, arguments);
    }

    return run;
  }()
}, {
  name: 'Disable button',
  description: 'Trigger the disabling of a button',
  run: function () {
    var _run4 = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee7(_ref7) {
      var container, controls, button;
      return _regenerator.default.wrap(function _callee7$(_context7) {
        while (1) {
          switch (_context7.prev = _context7.next) {
            case 0:
              container = _ref7.container, controls = _ref7.controls;
              button = container.querySelector('[data-testid="my-button"]');

              if (!(button == null)) {
                _context7.next = 4;
                break;
              }

              throw new Error('Could not find button element');

            case 4:
              if (!button.hasAttribute('disabled')) {
                _context7.next = 6;
                break;
              }

              throw new Error('Should not start disabled');

            case 6:
              _context7.next = 8;
              return controls.time( /*#__PURE__*/(0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee6() {
                return _regenerator.default.wrap(function _callee6$(_context6) {
                  while (1) {
                    switch (_context6.prev = _context6.next) {
                      case 0:
                        (0, _react2.fireEvent)(button, new Event('toggle-disabled'));

                      case 1:
                      case "end":
                        return _context6.stop();
                    }
                  }
                }, _callee6);
              })));

            case 8:
              if (button.hasAttribute('disabled')) {
                _context7.next = 10;
                break;
              }

              throw new Error('Should now be disabled');

            case 10:
            case "end":
              return _context7.stop();
          }
        }
      }, _callee7);
    }));

    function run(_x4) {
      return _run4.apply(this, arguments);
    }

    return run;
  }()
}];

var button = function button() {
  return /*#__PURE__*/_react.default.createElement(Example, {
    Component: _index.default
  });
};

exports.button = button;
button.story = {
  name: 'Button',
  parameters: {
    performance: {
      interactions: interactionTasks
    }
  }
};

var customThemeButton = function customThemeButton() {
  return /*#__PURE__*/_react.default.createElement(Example, {
    Component: _index.CustomThemeButton
  });
};

exports.customThemeButton = customThemeButton;
customThemeButton.story = {
  name: 'CustomThemeButton',
  parameters: {
    performance: {
      interactions: interactionTasks
    }
  }
};