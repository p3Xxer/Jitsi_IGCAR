import _defineProperty from "@babel/runtime/helpers/defineProperty";
import React from 'react';
import Button from '@atlaskit/button/custom-theme-button';
import InlineDialog from '@atlaskit/inline-dialog';
import IconForType from '../IconForType';
import { ButtonContents, Root, Text, Title } from './styledInlineMessage';
export default class InlineMessage extends React.Component {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "state", {
      isOpen: false,
      isHovered: false
    });

    _defineProperty(this, "onMouseEnter", () => {
      this.setState({
        isHovered: true
      });
    });

    _defineProperty(this, "onMouseLeave", () => {
      this.setState({
        isHovered: false
      });
    });

    _defineProperty(this, "toggleDialog", () => {
      this.setState({
        isOpen: !this.state.isOpen
      });
    });
  }

  render() {
    const {
      children,
      placement,
      secondaryText,
      title,
      type,
      testId
    } = this.props;
    const {
      isHovered,
      isOpen
    } = this.state;
    return /*#__PURE__*/React.createElement(Root, {
      onMouseEnter: this.onMouseEnter,
      onMouseLeave: this.onMouseLeave,
      appearance: type,
      "data-testid": testId
    }, /*#__PURE__*/React.createElement(InlineDialog, {
      onClose: () => {
        this.setState({
          isOpen: false
        });
      },
      content: children,
      isOpen: isOpen,
      placement: placement,
      testId: testId && `${testId}--inline-dialog`
    }, /*#__PURE__*/React.createElement(Button, {
      appearance: "subtle-link",
      onClick: this.toggleDialog,
      spacing: "none",
      testId: testId && `${testId}--button`
    }, /*#__PURE__*/React.createElement(ButtonContents, {
      isHovered: isHovered
    }, /*#__PURE__*/React.createElement(IconForType, {
      type: type,
      isHovered: isHovered,
      isOpen: isOpen
    }), title ? /*#__PURE__*/React.createElement(Title, {
      "data-testid": testId && `${testId}--title`,
      isHovered: isHovered
    }, title) : null, secondaryText ? /*#__PURE__*/React.createElement(Text, {
      "data-testid": testId && `${testId}--text`,
      isHovered: isHovered
    }, secondaryText) : null))));
  }

}

_defineProperty(InlineMessage, "defaultProps", {
  children: null,
  placement: 'bottom-start',
  secondaryText: '',
  title: '',
  type: 'connectivity'
});