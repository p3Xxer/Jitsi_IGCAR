"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _customThemeButton = _interopRequireDefault(require("@atlaskit/button/custom-theme-button"));

var _inlineDialog = _interopRequireDefault(require("@atlaskit/inline-dialog"));

var _IconForType = _interopRequireDefault(require("../IconForType"));

var _styledInlineMessage = require("./styledInlineMessage");

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

var InlineMessage = /*#__PURE__*/function (_React$Component) {
  (0, _inherits2.default)(InlineMessage, _React$Component);

  var _super = _createSuper(InlineMessage);

  function InlineMessage() {
    var _this;

    (0, _classCallCheck2.default)(this, InlineMessage);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "state", {
      isOpen: false,
      isHovered: false
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onMouseEnter", function () {
      _this.setState({
        isHovered: true
      });
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onMouseLeave", function () {
      _this.setState({
        isHovered: false
      });
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "toggleDialog", function () {
      _this.setState({
        isOpen: !_this.state.isOpen
      });
    });
    return _this;
  }

  (0, _createClass2.default)(InlineMessage, [{
    key: "render",
    value: function render() {
      var _this2 = this;

      var _this$props = this.props,
          children = _this$props.children,
          placement = _this$props.placement,
          secondaryText = _this$props.secondaryText,
          title = _this$props.title,
          type = _this$props.type,
          testId = _this$props.testId;
      var _this$state = this.state,
          isHovered = _this$state.isHovered,
          isOpen = _this$state.isOpen;
      return /*#__PURE__*/_react.default.createElement(_styledInlineMessage.Root, {
        onMouseEnter: this.onMouseEnter,
        onMouseLeave: this.onMouseLeave,
        appearance: type,
        "data-testid": testId
      }, /*#__PURE__*/_react.default.createElement(_inlineDialog.default, {
        onClose: function onClose() {
          _this2.setState({
            isOpen: false
          });
        },
        content: children,
        isOpen: isOpen,
        placement: placement,
        testId: testId && "".concat(testId, "--inline-dialog")
      }, /*#__PURE__*/_react.default.createElement(_customThemeButton.default, {
        appearance: "subtle-link",
        onClick: this.toggleDialog,
        spacing: "none",
        testId: testId && "".concat(testId, "--button")
      }, /*#__PURE__*/_react.default.createElement(_styledInlineMessage.ButtonContents, {
        isHovered: isHovered
      }, /*#__PURE__*/_react.default.createElement(_IconForType.default, {
        type: type,
        isHovered: isHovered,
        isOpen: isOpen
      }), title ? /*#__PURE__*/_react.default.createElement(_styledInlineMessage.Title, {
        "data-testid": testId && "".concat(testId, "--title"),
        isHovered: isHovered
      }, title) : null, secondaryText ? /*#__PURE__*/_react.default.createElement(_styledInlineMessage.Text, {
        "data-testid": testId && "".concat(testId, "--text"),
        isHovered: isHovered
      }, secondaryText) : null))));
    }
  }]);
  return InlineMessage;
}(_react.default.Component);

exports.default = InlineMessage;
(0, _defineProperty2.default)(InlineMessage, "defaultProps", {
  children: null,
  placement: 'bottom-start',
  secondaryText: '',
  title: '',
  type: 'connectivity'
});