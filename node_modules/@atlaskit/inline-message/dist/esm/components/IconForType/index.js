import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _inherits from "@babel/runtime/helpers/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

import React from 'react';
import { typesMapping } from '../../constants';
import IconWrapper from './styledIconForType';

var SelectedIconForType = /*#__PURE__*/function (_React$Component) {
  _inherits(SelectedIconForType, _React$Component);

  var _super = _createSuper(SelectedIconForType);

  function SelectedIconForType() {
    _classCallCheck(this, SelectedIconForType);

    return _super.apply(this, arguments);
  }

  _createClass(SelectedIconForType, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          type = _this$props.type,
          isHovered = _this$props.isHovered,
          isOpen = _this$props.isOpen;
      var _typesMapping$type = typesMapping[type],
          SelectedIcon = _typesMapping$type.icon,
          iconSize = _typesMapping$type.iconSize;
      return /*#__PURE__*/React.createElement(IconWrapper, {
        appearance: type,
        isHovered: isHovered,
        isOpen: isOpen
      }, /*#__PURE__*/React.createElement(SelectedIcon, {
        label: "Inline message icon",
        size: iconSize
      }));
    }
  }]);

  return SelectedIconForType;
}(React.Component);

export { SelectedIconForType as default };