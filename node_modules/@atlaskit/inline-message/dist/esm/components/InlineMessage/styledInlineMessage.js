import _taggedTemplateLiteral from "@babel/runtime/helpers/taggedTemplateLiteral";

function _templateObject5() {
  var data = _taggedTemplateLiteral(["\n  color: ", ";\n  padding: 0 ", "px;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n"]);

  _templateObject5 = function _templateObject5() {
    return data;
  };

  return data;
}

function _templateObject4() {
  var data = _taggedTemplateLiteral(["\n  color: ", ";\n  font-weight: 500;\n  padding: 0 ", "px;\n"]);

  _templateObject4 = function _templateObject4() {
    return data;
  };

  return data;
}

function _templateObject3() {
  var data = _taggedTemplateLiteral(["\n      color: ", ";\n      text-decoration: underline;\n    "]);

  _templateObject3 = function _templateObject3() {
    return data;
  };

  return data;
}

function _templateObject2() {
  var data = _taggedTemplateLiteral(["\n  align-items: center;\n  display: flex;\n  text-decoration: none;\n  ", ";\n"]);

  _templateObject2 = function _templateObject2() {
    return data;
  };

  return data;
}

function _templateObject() {
  var data = _taggedTemplateLiteral(["\n  display: inline-block;\n  max-width: 100%;\n  &:focus {\n    outline: 1px solid ", ";\n  }\n"]);

  _templateObject = function _templateObject() {
    return data;
  };

  return data;
}

import styled, { css } from 'styled-components';
import * as colors from '@atlaskit/theme/colors';
import { themed } from '@atlaskit/theme/components';
import { itemSpacing } from '../../constants';
var getFocusColor = themed('appearance', {
  connectivity: {
    light: colors.B500,
    dark: colors.B200
  },
  confirmation: {
    light: colors.G400,
    dark: colors.G400
  },
  info: {
    light: colors.P500,
    dark: colors.P300
  },
  warning: {
    light: colors.Y500,
    dark: colors.Y500
  },
  error: {
    light: colors.R500,
    dark: colors.R500
  }
});
export var Root = styled.div(_templateObject(), getFocusColor);
export var ButtonContents = styled.div(_templateObject2(), function (_ref) {
  var isHovered = _ref.isHovered;
  return isHovered && css(_templateObject3(), colors.N600);
});
var getTitleColor = themed({
  light: colors.N600,
  dark: colors.DN600
});
var getTextColor = themed({
  light: colors.N300,
  dark: colors.DN100
});
export var Title = styled.span(_templateObject4(), getTitleColor, itemSpacing);
export var Text = styled.span(_templateObject5(), getTextColor, itemSpacing);