"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _typeof = require("@babel/runtime/helpers/typeof");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _react = require("react");

var _core = require("@emotion/core");

var _analyticsNext = require("@atlaskit/analytics-next");

var _mergeRefs = _interopRequireDefault(require("@atlaskit/ds-lib/merge-refs"));

var _noop = _interopRequireDefault(require("@atlaskit/ds-lib/noop"));

var _motion = require("@atlaskit/motion");

var _components = require("@atlaskit/theme/components");

var _constants = require("../../../constants");

var theme = _interopRequireWildcard(require("../../../theme"));

var _base = _interopRequireDefault(require("../shared/base"));

var _before = _interopRequireDefault(require("../shared/before"));

var _content = _interopRequireDefault(require("../shared/content"));

var _removeButton = _interopRequireDefault(require("./remove-button"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/** @jsx jsx */
var TagStatus;

(function (TagStatus) {
  TagStatus["Showing"] = "showing";
  TagStatus["Removing"] = "removing";
  TagStatus["Removed"] = "removed";
})(TagStatus || (TagStatus = {}));

var packageName = "@atlaskit/tag";
var packageVersion = "11.2.5";

var defaultBeforeRemoveAction = function defaultBeforeRemoveAction() {
  return true;
};
/**
 * These hide the focus ring for the tag when its remove button is focused,
 * preventing a double focus ring.
 */


var removingStyles = (0, _core.css)({
  '&:focus-within': {
    boxShadow: "0 0 0 2px transparent",
    outline: 'none'
  }
});
var RemovableTag = /*#__PURE__*/(0, _react.forwardRef)(function (_ref, ref) {
  var appearance = _ref.appearance,
      _ref$elemBefore = _ref.elemBefore,
      elemBefore = _ref$elemBefore === void 0 ? null : _ref$elemBefore,
      _ref$isRemovable = _ref.isRemovable,
      isRemovable = _ref$isRemovable === void 0 ? true : _ref$isRemovable,
      _ref$text = _ref.text,
      text = _ref$text === void 0 ? '' : _ref$text,
      _ref$color = _ref.color,
      color = _ref$color === void 0 ? 'standard' : _ref$color,
      href = _ref.href,
      removeButtonLabel = _ref.removeButtonLabel,
      testId = _ref.testId,
      _ref$onBeforeRemoveAc = _ref.onBeforeRemoveAction,
      onBeforeRemoveAction = _ref$onBeforeRemoveAc === void 0 ? defaultBeforeRemoveAction : _ref$onBeforeRemoveAc,
      _ref$onAfterRemoveAct = _ref.onAfterRemoveAction,
      onAfterRemoveAction = _ref$onAfterRemoveAct === void 0 ? _noop.default : _ref$onAfterRemoveAct,
      linkComponent = _ref.linkComponent;

  var _useState = (0, _react.useState)(TagStatus.Showing),
      _useState2 = (0, _slicedToArray2.default)(_useState, 2),
      status = _useState2[0],
      setStatus = _useState2[1];

  var _useState3 = (0, _react.useState)(false),
      _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
      isHoverCloseButton = _useState4[0],
      setIsHoverCloseButton = _useState4[1];

  var _useGlobalTheme = (0, _components.useGlobalTheme)(),
      mode = _useGlobalTheme.mode;

  var onAfterRemoveActionWithAnalytics = (0, _analyticsNext.useCallbackWithAnalytics)(onAfterRemoveAction, {
    action: 'removed',
    actionSubject: 'tag',
    attributes: {
      componentName: 'tag',
      packageName: packageName,
      packageVersion: packageVersion
    }
  }, 'atlaskit');
  var handleRemoveComplete = (0, _react.useCallback)(function () {
    onAfterRemoveActionWithAnalytics(text);
    setStatus(TagStatus.Removed);
  }, [onAfterRemoveActionWithAnalytics, text]);
  var handleRemoveRequest = (0, _react.useCallback)(function () {
    if (onBeforeRemoveAction && onBeforeRemoveAction()) {
      handleRemoveComplete();
    }
  }, [handleRemoveComplete, onBeforeRemoveAction]);
  var onKeyPress = (0, _react.useCallback)(function (e) {
    var spacebarOrEnter = e.key === ' ' || e.key === 'Enter';

    if (spacebarOrEnter) {
      e.stopPropagation();
      handleRemoveRequest();
    }
  }, [handleRemoveRequest]);
  var removingTag = (0, _react.useCallback)(function () {
    return setStatus(TagStatus.Removing);
  }, []);
  var showingTag = (0, _react.useCallback)(function () {
    return setStatus(TagStatus.Showing);
  }, []);
  var handleMouseOver = (0, _react.useCallback)(function () {
    return setIsHoverCloseButton(true);
  }, []);
  var handleMouseOut = (0, _react.useCallback)(function () {
    return setIsHoverCloseButton(false);
  }, []);
  var removeButton = isRemovable ? (0, _core.jsx)(_removeButton.default, {
    "aria-label": "".concat(removeButtonLabel, " ").concat(text),
    onClick: handleRemoveRequest,
    onFocus: removingTag,
    onBlur: showingTag,
    onKeyPress: onKeyPress,
    onMouseOver: handleMouseOver,
    onMouseOut: handleMouseOut,
    testId: "close-button-".concat(testId)
  }) : undefined;
  var content = (0, _core.jsx)(_content.default, {
    elemBefore: elemBefore,
    isRemovable: isRemovable,
    text: text,
    color: color,
    href: href,
    linkComponent: linkComponent
  });
  var hoverCloseButtonColors = (0, _react.useMemo)(function () {
    var _ref2;

    return _ref2 = {}, (0, _defineProperty2.default)(_ref2, _constants.cssVar.color.background.hover, theme.removalHoverBackgroundColors[mode]), (0, _defineProperty2.default)(_ref2, _constants.cssVar.color.background.active, theme.removalActiveBackgroundColors[mode]), (0, _defineProperty2.default)(_ref2, _constants.cssVar.color.text.hover, theme.removalTextColors[mode]), _ref2;
  }, [mode]);
  return (0, _core.jsx)(_motion.ExitingPersistence, null, !(status === TagStatus.Removed) && (0, _core.jsx)(_motion.ShrinkOut, null, function (motion) {
    return (0, _core.jsx)(_base.default, {
      ref: (0, _mergeRefs.default)([motion.ref, ref]),
      appearance: appearance,
      color: color,
      testId: testId,
      css: [status === TagStatus.Removing && removingStyles],
      style: isHoverCloseButton ? hoverCloseButtonColors : undefined,
      "data-removable": true,
      "data-removing": status === TagStatus.Removing,
      "data-ishoverclosebutton": isHoverCloseButton,
      href: href,
      before: (0, _core.jsx)(_before.default, {
        elemBefore: elemBefore
      }),
      contentElement: content,
      after: removeButton
    });
  }));
});

var _default = /*#__PURE__*/(0, _react.memo)(RemovableTag);

exports.default = _default;