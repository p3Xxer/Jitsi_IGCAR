"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _typeof = require("@babel/runtime/helpers/typeof");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _react = _interopRequireDefault(require("react"));

var _core = require("@emotion/core");

var _components = require("@atlaskit/theme/components");

var _constants = require("../../../constants");

var theme = _interopRequireWildcard(require("../../../theme"));

var _excluded = ["before", "contentElement", "after", "testId", "appearance", "style", "color", "href", "className"];

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

var baseStyles = (0, _core.css)({
  display: 'inline-flex',
  height: _constants.tagHeight,
  margin: _constants.defaultMargin,
  padding: 0,
  position: 'relative',
  backgroundColor: "var(".concat(_constants.cssVar.color.background.default, ")"),
  borderRadius: "var(".concat(_constants.cssVar.borderRadius, ")"),
  color: "var(".concat(_constants.cssVar.color.text.default, ")"),
  cursor: 'default',
  lineHeight: 1,
  overflow: 'hidden',
  pointerEvents: 'none'
});
var interactiveStyles = (0, _core.css)({
  '&:hover': {
    backgroundColor: "var(".concat(_constants.cssVar.color.background.hover, ")"),
    color: "var(".concat(_constants.cssVar.color.text.hover, ")")
  },
  '&:active': {
    backgroundColor: "var(".concat(_constants.cssVar.color.background.active, ")"),
    color: "var(".concat(_constants.cssVar.color.text.hover, ")")
  },
  '&:focus-within': {
    boxShadow: "0 0 0 2px var(".concat(_constants.cssVar.color.focusRing, ")"),
    outline: 'none'
  }
});

var BaseTag = /*#__PURE__*/_react.default.forwardRef(function BaseTag(_ref, ref) {
  var _objectSpread2;

  var before = _ref.before,
      contentElement = _ref.contentElement,
      after = _ref.after,
      testId = _ref.testId,
      _ref$appearance = _ref.appearance,
      appearance = _ref$appearance === void 0 ? 'default' : _ref$appearance,
      style = _ref.style,
      _ref$color = _ref.color,
      color = _ref$color === void 0 ? 'standard' : _ref$color,
      href = _ref.href,
      className = _ref.className,
      other = (0, _objectWithoutProperties2.default)(_ref, _excluded);

  var _useGlobalTheme = (0, _components.useGlobalTheme)(),
      mode = _useGlobalTheme.mode;

  var isLink = Boolean(href);
  var isRemovable = Boolean(after);
  var isInteractive = isLink || isRemovable;
  return (0, _core.jsx)("span", (0, _extends2.default)({}, other, {
    ref: ref,
    css: [baseStyles, isInteractive && interactiveStyles],
    style: _objectSpread((_objectSpread2 = {}, (0, _defineProperty2.default)(_objectSpread2, _constants.cssVar.color.background.default, theme.backgroundColors[color][mode]), (0, _defineProperty2.default)(_objectSpread2, _constants.cssVar.color.text.default, theme.textColors[color][mode]), (0, _defineProperty2.default)(_objectSpread2, _constants.cssVar.color.background.hover, theme.linkHoverBackgroundColors[color][mode]), (0, _defineProperty2.default)(_objectSpread2, _constants.cssVar.color.background.active, theme.linkActiveBackgroundColors[mode]), (0, _defineProperty2.default)(_objectSpread2, _constants.cssVar.color.focusRing, theme.focusRingColors[mode]), (0, _defineProperty2.default)(_objectSpread2, _constants.cssVar.borderRadius, theme.borderRadius[appearance]), _objectSpread2), style),
    className: className,
    "data-testid": testId
  }), before, contentElement, after);
});

var _default = BaseTag;
exports.default = _default;