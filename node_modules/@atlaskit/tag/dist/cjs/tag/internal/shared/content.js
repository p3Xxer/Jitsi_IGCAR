"use strict";

var _typeof = require("@babel/runtime/helpers/typeof");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _core = require("@emotion/core");

var _components = require("@atlaskit/theme/components");

var _constants = require("../../../constants");

var theme = _interopRequireWildcard(require("../../../theme"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/** @jsx jsx */
var baseStyles = (0, _core.css)({
  maxWidth: _constants.maxTextWidth,
  paddingTop: '2px',
  paddingRight: _constants.defaultTextPadding,
  paddingBottom: '2px',
  paddingLeft: _constants.defaultTextPadding,
  fontSize: _constants.textFontSize,
  fontWeight: 'normal',
  lineHeight: 1,
  overflow: 'hidden',
  textOverflow: 'ellipsis',
  whiteSpace: 'nowrap'
});
var linkStyles = (0, _core.css)({
  pointerEvents: 'auto',
  textDecoration: 'none',
  '&:focus': {
    outline: 'none'
  }
});
var lightLinkStyles = (0, _core.css)({
  '&:hover': {
    color: theme.linkHoverTextColors.light
  }
});
var darkLinkStyles = (0, _core.css)({
  '&:hover': {
    color: theme.linkHoverTextColors.dark
  }
});
var colorfulLinkStyles = (0, _core.css)({
  color: 'inherit',
  textDecoration: 'underline'
});
var hasAfterStyles = (0, _core.css)({
  maxWidth: "".concat(_constants.maxTextWidthUnitless - _constants.buttonWidthUnitless, "px"),
  paddingRight: _constants.textPaddingRight
});
var hasBeforeStyles = (0, _core.css)({
  marginLeft: _constants.textMarginLeft
});

var Content = function Content(_ref) {
  var _ref$elemBefore = _ref.elemBefore,
      elemBefore = _ref$elemBefore === void 0 ? null : _ref$elemBefore,
      _ref$isRemovable = _ref.isRemovable,
      isRemovable = _ref$isRemovable === void 0 ? true : _ref$isRemovable,
      _ref$text = _ref.text,
      text = _ref$text === void 0 ? '' : _ref$text,
      _ref$color = _ref.color,
      color = _ref$color === void 0 ? 'standard' : _ref$color,
      href = _ref.href,
      linkComponent = _ref.linkComponent;

  var _useGlobalTheme = (0, _components.useGlobalTheme)(),
      mode = _useGlobalTheme.mode;

  var Link = linkComponent !== null && linkComponent !== void 0 ? linkComponent : 'a';

  if (href) {
    return (0, _core.jsx)(Link, {
      href: href,
      "data-color": color,
      css: [baseStyles, linkStyles, mode === 'light' && lightLinkStyles, mode === 'dark' && darkLinkStyles, color !== 'standard' && colorfulLinkStyles, elemBefore && hasBeforeStyles, isRemovable && hasAfterStyles]
    }, text);
  } else {
    return (0, _core.jsx)("span", {
      css: [baseStyles, elemBefore && hasBeforeStyles, isRemovable && hasAfterStyles]
    }, text);
  }
};

var _default = Content;
exports.default = _default;