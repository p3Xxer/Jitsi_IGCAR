"use strict";

var _typeof = require("@babel/runtime/helpers/typeof");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.textColors = exports.removalTextColors = exports.removalHoverBackgroundColors = exports.removalActiveBackgroundColors = exports.linkHoverTextColors = exports.linkHoverBackgroundColors = exports.linkActiveBackgroundColors = exports.focusRingColors = exports.borderRadius = exports.backgroundColors = void 0;

var colors = _interopRequireWildcard(require("@atlaskit/theme/colors"));

var _constants = require("./constants");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var textColors = {
  standard: {
    light: "var(--ds-text, ".concat(colors.N700, ")"),
    dark: "var(--ds-text, ".concat(colors.DN600, ")")
  },

  /* eslint-disable @atlaskit/design-system/ensure-design-token-usage */
  green: {
    light: "var(--ds-text, ".concat(colors.N800, ")"),
    dark: "var(--ds-text, ".concat(colors.N800, ")")
  },
  purple: {
    light: "var(--ds-text, ".concat(colors.N800, ")"),
    dark: "var(--ds-text, ".concat(colors.N800, ")")
  },
  red: {
    light: "var(--ds-text, ".concat(colors.N800, ")"),
    dark: "var(--ds-text, ".concat(colors.N800, ")")
  },
  yellow: {
    light: "var(--ds-text, ".concat(colors.N800, ")"),
    dark: "var(--ds-text, ".concat(colors.N800, ")")
  },
  grey: {
    light: colors.N0,
    dark: colors.N0
  },
  teal: {
    light: "var(--ds-text, ".concat(colors.N800, ")"),
    dark: "var(--ds-text, ".concat(colors.N800, ")")
  },
  blue: {
    light: "var(--ds-text, ".concat(colors.N800, ")"),
    dark: "var(--ds-text, ".concat(colors.N800, ")")
  },
  tealLight: {
    light: colors.N500,
    dark: colors.N500
  },

  /* eslint-enable @atlaskit/design-system/ensure-design-token-usage */
  blueLight: {
    light: "var(--ds-text-brand, ".concat(colors.B500, ")"),
    dark: "var(--ds-text-brand, ".concat(colors.B500, ")")
  },
  greenLight: {
    light: "var(--ds-text-success, ".concat(colors.G500, ")"),
    dark: "var(--ds-text-success, ".concat(colors.G500, ")")
  },
  purpleLight: {
    light: "var(--ds-text-discovery, ".concat(colors.P500, ")"),
    dark: "var(--ds-text-discovery, ".concat(colors.P500, ")")
  },
  redLight: {
    light: "var(--ds-text-danger, ".concat(colors.N500, ")"),
    dark: "var(--ds-text-danger, ".concat(colors.N500, ")")
  },
  yellowLight: {
    light: "var(--ds-text-warning, ".concat(colors.N500, ")"),
    dark: "var(--ds-text-warning, ".concat(colors.N500, ")")
  },
  // eslint-disable-next-line @atlaskit/design-system/ensure-design-token-usage
  greyLight: {
    light: colors.N500,
    dark: colors.N500
  }
};
exports.textColors = textColors;
var backgroundColors = {
  standard: {
    light: "var(--ds-background-neutral, ".concat(colors.N20, ")"),
    dark: "var(--ds-background-neutral, ".concat(colors.DN100A, ")")
  },

  /* eslint-disable @atlaskit/design-system/ensure-design-token-usage */
  green: {
    light: colors.G200,
    dark: colors.G200
  },
  purple: {
    light: colors.P100,
    dark: colors.P100
  },
  red: {
    light: colors.R100,
    dark: colors.R100
  },
  yellow: {
    light: colors.Y200,
    dark: colors.Y200
  },
  grey: {
    light: colors.N500,
    dark: colors.N500
  },
  teal: {
    light: colors.T200,
    dark: colors.T200
  },
  blue: {
    light: colors.B100,
    dark: colors.B100
  },
  tealLight: {
    light: colors.T100,
    dark: colors.T100
  },

  /* eslint-enable @atlaskit/design-system/ensure-design-token-usage */
  blueLight: {
    light: "var(--ds-background-accent-blue, ".concat(colors.B75, ")"),
    dark: "var(--ds-background-accent-blue, ".concat(colors.B75, ")")
  },
  greenLight: {
    light: "var(--ds-background-accent-green, ".concat(colors.G100, ")"),
    dark: "var(--ds-background-accent-green, ".concat(colors.G100, ")")
  },
  purpleLight: {
    light: "var(--ds-background-accent-purple, ".concat(colors.P75, ")"),
    dark: "var(--ds-background-accent-purple, ".concat(colors.P75, ")")
  },
  redLight: {
    light: "var(--ds-background-accent-red, ".concat(colors.R75, ")"),
    dark: "var(--ds-background-accent-red, ".concat(colors.R75, ")")
  },
  yellowLight: {
    light: "var(--ds-background-accent-orange, ".concat(colors.Y100, ")"),
    dark: "var(--ds-background-accent-orange, ".concat(colors.Y100, ")")
  },
  // eslint-disable-next-line @atlaskit/design-system/ensure-design-token-usage
  greyLight: {
    light: colors.N30,
    dark: colors.N30
  }
};
exports.backgroundColors = backgroundColors;
var linkHoverBackgroundColors = {
  standard: {
    light: "var(--ds-background-neutral-hovered, ".concat(colors.N30, ")"),
    dark: "var(--ds-background-neutral-hovered, ".concat(colors.DN60, ")")
  },

  /* eslint-disable @atlaskit/design-system/ensure-design-token-usage */
  green: {
    light: colors.G100,
    dark: colors.DN60
  },
  purple: {
    light: colors.P75,
    dark: colors.DN60
  },
  red: {
    light: colors.R75,
    dark: colors.DN60
  },
  yellow: {
    light: colors.Y100,
    dark: colors.DN60
  },
  grey: {
    light: colors.N50,
    dark: colors.DN60
  },
  teal: {
    light: colors.T100,
    dark: colors.DN60
  },
  blue: {
    light: colors.B75,
    dark: colors.DN60
  },
  tealLight: {
    light: colors.T75,
    dark: colors.DN60
  },
  blueLight: {
    light: colors.B50,
    dark: colors.DN60
  },
  greenLight: {
    light: colors.G75,
    dark: colors.DN60
  },
  purpleLight: {
    light: colors.P50,
    dark: colors.DN60
  },
  redLight: {
    light: colors.R50,
    dark: colors.DN60
  },
  yellowLight: {
    light: colors.Y75,
    dark: colors.DN60
  },
  greyLight: {
    light: colors.N30,
    dark: colors.DN60
  }
  /* eslint-enable @atlaskit/design-system/ensure-design-token-usage */

};
exports.linkHoverBackgroundColors = linkHoverBackgroundColors;
var focusRingColors = {
  light: "var(--ds-border-focused, ".concat(colors.B100, ")"),
  dark: "var(--ds-border-focused, ".concat(colors.B75, ")")
};
exports.focusRingColors = focusRingColors;
var linkHoverTextColors = {
  light: "var(--ds-link-pressed, ".concat(colors.B300, ")"),
  dark: "var(--ds-link-pressed, ".concat(colors.B200, ")")
};
exports.linkHoverTextColors = linkHoverTextColors;
var linkActiveBackgroundColors = {
  light: "var(--ds-background-neutral-pressed, ".concat(colors.N30, ")"),
  dark: "var(--ds-background-neutral-pressed, ".concat(colors.DN600, ")")
};
exports.linkActiveBackgroundColors = linkActiveBackgroundColors;
var borderRadius = {
  default: _constants.defaultBorderRadius,
  rounded: _constants.defaultRoundedBorderRadius
};
exports.borderRadius = borderRadius;
var removalHoverBackgroundColors = {
  light: "var(--ds-background-danger-hovered, ".concat(colors.R50, ")"),
  dark: "var(--ds-background-danger-hovered, ".concat(colors.R100, ")")
};
exports.removalHoverBackgroundColors = removalHoverBackgroundColors;
var removalActiveBackgroundColors = {
  light: "var(--ds-background-danger-pressed, ".concat(colors.R50, ")"),
  dark: "var(--ds-background-danger-pressed, ".concat(colors.DN600, ")")
};
exports.removalActiveBackgroundColors = removalActiveBackgroundColors;
var removalTextColors = {
  light: "var(--ds-text, ".concat(colors.R500, ")"),
  dark: "var(--ds-text, ".concat(colors.DN30, ")")
};
exports.removalTextColors = removalTextColors;