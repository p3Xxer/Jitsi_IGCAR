import _extends from "@babel/runtime/helpers/extends";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
var _excluded = ["before", "contentElement", "after", "testId", "appearance", "style", "color", "href", "className"];

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

/** @jsx jsx */
import React from 'react';
import { css, jsx } from '@emotion/core';
import { useGlobalTheme } from '@atlaskit/theme/components';
import { cssVar, defaultMargin, tagHeight } from '../../../constants';
import * as theme from '../../../theme';
var baseStyles = css({
  display: 'inline-flex',
  height: tagHeight,
  margin: defaultMargin,
  padding: 0,
  position: 'relative',
  backgroundColor: "var(".concat(cssVar.color.background.default, ")"),
  borderRadius: "var(".concat(cssVar.borderRadius, ")"),
  color: "var(".concat(cssVar.color.text.default, ")"),
  cursor: 'default',
  lineHeight: 1,
  overflow: 'hidden',
  pointerEvents: 'none'
});
var interactiveStyles = css({
  '&:hover': {
    backgroundColor: "var(".concat(cssVar.color.background.hover, ")"),
    color: "var(".concat(cssVar.color.text.hover, ")")
  },
  '&:active': {
    backgroundColor: "var(".concat(cssVar.color.background.active, ")"),
    color: "var(".concat(cssVar.color.text.hover, ")")
  },
  '&:focus-within': {
    boxShadow: "0 0 0 2px var(".concat(cssVar.color.focusRing, ")"),
    outline: 'none'
  }
});
var BaseTag = /*#__PURE__*/React.forwardRef(function BaseTag(_ref, ref) {
  var _objectSpread2;

  var before = _ref.before,
      contentElement = _ref.contentElement,
      after = _ref.after,
      testId = _ref.testId,
      _ref$appearance = _ref.appearance,
      appearance = _ref$appearance === void 0 ? 'default' : _ref$appearance,
      style = _ref.style,
      _ref$color = _ref.color,
      color = _ref$color === void 0 ? 'standard' : _ref$color,
      href = _ref.href,
      className = _ref.className,
      other = _objectWithoutProperties(_ref, _excluded);

  var _useGlobalTheme = useGlobalTheme(),
      mode = _useGlobalTheme.mode;

  var isLink = Boolean(href);
  var isRemovable = Boolean(after);
  var isInteractive = isLink || isRemovable;
  return jsx("span", _extends({}, other, {
    ref: ref,
    css: [baseStyles, isInteractive && interactiveStyles],
    style: _objectSpread((_objectSpread2 = {}, _defineProperty(_objectSpread2, cssVar.color.background.default, theme.backgroundColors[color][mode]), _defineProperty(_objectSpread2, cssVar.color.text.default, theme.textColors[color][mode]), _defineProperty(_objectSpread2, cssVar.color.background.hover, theme.linkHoverBackgroundColors[color][mode]), _defineProperty(_objectSpread2, cssVar.color.background.active, theme.linkActiveBackgroundColors[mode]), _defineProperty(_objectSpread2, cssVar.color.focusRing, theme.focusRingColors[mode]), _defineProperty(_objectSpread2, cssVar.borderRadius, theme.borderRadius[appearance]), _objectSpread2), style),
    className: className,
    "data-testid": testId
  }), before, contentElement, after);
});
export default BaseTag;