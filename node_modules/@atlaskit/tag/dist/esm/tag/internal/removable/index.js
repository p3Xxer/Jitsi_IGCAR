import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _slicedToArray from "@babel/runtime/helpers/slicedToArray";

/** @jsx jsx */
import { forwardRef, memo, useCallback, useMemo, useState } from 'react';
import { css, jsx } from '@emotion/core';
import { useCallbackWithAnalytics } from '@atlaskit/analytics-next';
import mergeRefs from '@atlaskit/ds-lib/merge-refs';
import noop from '@atlaskit/ds-lib/noop';
import { ExitingPersistence, ShrinkOut } from '@atlaskit/motion';
import { useGlobalTheme } from '@atlaskit/theme/components';
import { cssVar } from '../../../constants';
import * as theme from '../../../theme';
import BaseTag from '../shared/base';
import Before from '../shared/before';
import Content from '../shared/content';
import RemoveButton from './remove-button';
var TagStatus;

(function (TagStatus) {
  TagStatus["Showing"] = "showing";
  TagStatus["Removing"] = "removing";
  TagStatus["Removed"] = "removed";
})(TagStatus || (TagStatus = {}));

var packageName = "@atlaskit/tag";
var packageVersion = "11.2.5";

var defaultBeforeRemoveAction = function defaultBeforeRemoveAction() {
  return true;
};
/**
 * These hide the focus ring for the tag when its remove button is focused,
 * preventing a double focus ring.
 */


var removingStyles = css({
  '&:focus-within': {
    boxShadow: "0 0 0 2px transparent",
    outline: 'none'
  }
});
var RemovableTag = /*#__PURE__*/forwardRef(function (_ref, ref) {
  var appearance = _ref.appearance,
      _ref$elemBefore = _ref.elemBefore,
      elemBefore = _ref$elemBefore === void 0 ? null : _ref$elemBefore,
      _ref$isRemovable = _ref.isRemovable,
      isRemovable = _ref$isRemovable === void 0 ? true : _ref$isRemovable,
      _ref$text = _ref.text,
      text = _ref$text === void 0 ? '' : _ref$text,
      _ref$color = _ref.color,
      color = _ref$color === void 0 ? 'standard' : _ref$color,
      href = _ref.href,
      removeButtonLabel = _ref.removeButtonLabel,
      testId = _ref.testId,
      _ref$onBeforeRemoveAc = _ref.onBeforeRemoveAction,
      onBeforeRemoveAction = _ref$onBeforeRemoveAc === void 0 ? defaultBeforeRemoveAction : _ref$onBeforeRemoveAc,
      _ref$onAfterRemoveAct = _ref.onAfterRemoveAction,
      onAfterRemoveAction = _ref$onAfterRemoveAct === void 0 ? noop : _ref$onAfterRemoveAct,
      linkComponent = _ref.linkComponent;

  var _useState = useState(TagStatus.Showing),
      _useState2 = _slicedToArray(_useState, 2),
      status = _useState2[0],
      setStatus = _useState2[1];

  var _useState3 = useState(false),
      _useState4 = _slicedToArray(_useState3, 2),
      isHoverCloseButton = _useState4[0],
      setIsHoverCloseButton = _useState4[1];

  var _useGlobalTheme = useGlobalTheme(),
      mode = _useGlobalTheme.mode;

  var onAfterRemoveActionWithAnalytics = useCallbackWithAnalytics(onAfterRemoveAction, {
    action: 'removed',
    actionSubject: 'tag',
    attributes: {
      componentName: 'tag',
      packageName: packageName,
      packageVersion: packageVersion
    }
  }, 'atlaskit');
  var handleRemoveComplete = useCallback(function () {
    onAfterRemoveActionWithAnalytics(text);
    setStatus(TagStatus.Removed);
  }, [onAfterRemoveActionWithAnalytics, text]);
  var handleRemoveRequest = useCallback(function () {
    if (onBeforeRemoveAction && onBeforeRemoveAction()) {
      handleRemoveComplete();
    }
  }, [handleRemoveComplete, onBeforeRemoveAction]);
  var onKeyPress = useCallback(function (e) {
    var spacebarOrEnter = e.key === ' ' || e.key === 'Enter';

    if (spacebarOrEnter) {
      e.stopPropagation();
      handleRemoveRequest();
    }
  }, [handleRemoveRequest]);
  var removingTag = useCallback(function () {
    return setStatus(TagStatus.Removing);
  }, []);
  var showingTag = useCallback(function () {
    return setStatus(TagStatus.Showing);
  }, []);
  var handleMouseOver = useCallback(function () {
    return setIsHoverCloseButton(true);
  }, []);
  var handleMouseOut = useCallback(function () {
    return setIsHoverCloseButton(false);
  }, []);
  var removeButton = isRemovable ? jsx(RemoveButton, {
    "aria-label": "".concat(removeButtonLabel, " ").concat(text),
    onClick: handleRemoveRequest,
    onFocus: removingTag,
    onBlur: showingTag,
    onKeyPress: onKeyPress,
    onMouseOver: handleMouseOver,
    onMouseOut: handleMouseOut,
    testId: "close-button-".concat(testId)
  }) : undefined;
  var content = jsx(Content, {
    elemBefore: elemBefore,
    isRemovable: isRemovable,
    text: text,
    color: color,
    href: href,
    linkComponent: linkComponent
  });
  var hoverCloseButtonColors = useMemo(function () {
    var _ref2;

    return _ref2 = {}, _defineProperty(_ref2, cssVar.color.background.hover, theme.removalHoverBackgroundColors[mode]), _defineProperty(_ref2, cssVar.color.background.active, theme.removalActiveBackgroundColors[mode]), _defineProperty(_ref2, cssVar.color.text.hover, theme.removalTextColors[mode]), _ref2;
  }, [mode]);
  return jsx(ExitingPersistence, null, !(status === TagStatus.Removed) && jsx(ShrinkOut, null, function (motion) {
    return jsx(BaseTag, {
      ref: mergeRefs([motion.ref, ref]),
      appearance: appearance,
      color: color,
      testId: testId,
      css: [status === TagStatus.Removing && removingStyles],
      style: isHoverCloseButton ? hoverCloseButtonColors : undefined,
      "data-removable": true,
      "data-removing": status === TagStatus.Removing,
      "data-ishoverclosebutton": isHoverCloseButton,
      href: href,
      before: jsx(Before, {
        elemBefore: elemBefore
      }),
      contentElement: content,
      after: removeButton
    });
  }));
});
export default /*#__PURE__*/memo(RemovableTag);