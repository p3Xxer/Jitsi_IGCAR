"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.Checkbox = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _react = require("react");

var _core = require("@emotion/core");

var _usePlatformLeafEventHandler = require("@atlaskit/analytics-next/usePlatformLeafEventHandler");

var _components = _interopRequireDefault(require("@atlaskit/theme/components"));

var _internal = require("./internal");

var _version = require("./version.json");

/**  @jsx jsx */
var sizes = {
  small: '16',
  medium: '24',
  large: '32',
  xlarge: '48'
}; // An svg is used so we don't pull in styled-components as well as
// a wrapping span. This approach is more performant.

var CheckboxIcon = /*#__PURE__*/(0, _react.memo)(function (_ref) {
  var size = _ref.size,
      isIndeterminate = _ref.isIndeterminate;
  return (0, _core.jsx)("svg", {
    width: sizes[size],
    height: sizes[size],
    viewBox: "0 0 24 24"
  }, (0, _core.jsx)("g", {
    fillRule: "evenodd"
  }, (0, _core.jsx)("rect", {
    fill: "currentColor",
    x: "6",
    y: "6",
    width: "12",
    height: "12",
    rx: "2"
  }), isIndeterminate ? (0, _core.jsx)("rect", {
    fill: "inherit",
    x: "8",
    y: "11",
    width: "8",
    height: "2",
    rx: "1"
  }) : (0, _core.jsx)("path", {
    d: "M9.707 11.293a1 1 0 1 0-1.414 1.414l2 2a1 1 0 0 0 1.414 0l4-4a1 1 0 1 0-1.414-1.414L11 12.586l-1.293-1.293z",
    fill: "inherit"
  })));
});
var CheckboxWithMode = /*#__PURE__*/(0, _react.forwardRef)(function Checkbox(props, ref) {
  var isCheckedProp = props.isChecked,
      _props$isDisabled = props.isDisabled,
      isDisabled = _props$isDisabled === void 0 ? false : _props$isDisabled,
      _props$isInvalid = props.isInvalid,
      isInvalid = _props$isInvalid === void 0 ? false : _props$isInvalid,
      _props$defaultChecked = props.defaultChecked,
      defaultChecked = _props$defaultChecked === void 0 ? false : _props$defaultChecked,
      _props$isIndeterminat = props.isIndeterminate,
      isIndeterminate = _props$isIndeterminat === void 0 ? false : _props$isIndeterminat,
      _props$size = props.size,
      size = _props$size === void 0 ? 'medium' : _props$size,
      onChangeProps = props.onChange,
      analyticsContext = props.analyticsContext,
      label = props.label,
      mode = props.mode,
      name = props.name,
      value = props.value,
      isRequired = props.isRequired,
      testId = props.testId,
      rest = (0, _objectWithoutProperties2.default)(props, ["isChecked", "isDisabled", "isInvalid", "defaultChecked", "isIndeterminate", "size", "onChange", "analyticsContext", "label", "mode", "name", "value", "isRequired", "testId"]);

  var _useState = (0, _react.useState)(isCheckedProp !== undefined ? isCheckedProp : defaultChecked),
      _useState2 = (0, _slicedToArray2.default)(_useState, 2),
      isCheckedState = _useState2[0],
      setIsCheckedState = _useState2[1];

  var onChange = (0, _react.useCallback)(function (e, analyticsEvent) {
    setIsCheckedState(e.target.checked);

    if (onChangeProps) {
      onChangeProps(e, analyticsEvent);
    }
  }, [onChangeProps]);
  var onChangeAnalytics = (0, _usePlatformLeafEventHandler.usePlatformLeafEventHandler)({
    fn: onChange,
    action: 'changed',
    analyticsData: analyticsContext,
    componentName: 'checkbox',
    packageName: _version.name,
    packageVersion: _version.version
  }); // Use isChecked from the state if it is controlled

  var isChecked = isCheckedProp === undefined ? isCheckedState : isCheckedProp; // The styles are being generated for the input but are being
  // applied to the svg with a sibling selector so we have access
  // to the pseudo-classes of the input

  var styles = (0, _react.useMemo)(function () {
    return (0, _internal.getCheckboxStyles)(mode);
  }, [mode]);
  return (0, _core.jsx)(_internal.Label, {
    isDisabled: isDisabled,
    testId: testId && "".concat(testId, "--checkbox-label")
  }, (0, _core.jsx)("input", (0, _extends2.default)({}, rest, {
    type: "checkbox",
    ref: ref,
    disabled: isDisabled,
    checked: isChecked,
    value: value,
    name: name,
    required: isRequired,
    css: styles,
    onChange: onChangeAnalytics,
    "aria-checked": isIndeterminate ? 'mixed' : isChecked,
    "data-testid": testId && "".concat(testId, "--hidden-checkbox"),
    "data-invalid": isInvalid ? 'true' : undefined
  })), (0, _core.jsx)(CheckboxIcon, {
    size: size,
    isIndeterminate: isIndeterminate
  }), (0, _core.jsx)(_internal.LabelText, null, label, isRequired && (0, _core.jsx)(_internal.RequiredIndicator, {
    "aria-hidden": "true"
  })));
});
var Checkbox = /*#__PURE__*/(0, _react.memo)( /*#__PURE__*/(0, _react.forwardRef)(function Checkbox(props, ref) {
  return (0, _core.jsx)(_components.default.Consumer, null, function (_ref2) {
    var mode = _ref2.mode;
    return (0, _core.jsx)(CheckboxWithMode, (0, _extends2.default)({}, props, {
      ref: ref,
      mode: mode
    }));
  });
}));
exports.Checkbox = Checkbox;
Checkbox.displayName = 'Checkbox';
var _default = Checkbox;
exports.default = _default;