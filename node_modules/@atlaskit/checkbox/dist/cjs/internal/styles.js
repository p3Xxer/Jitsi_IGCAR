"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _taggedTemplateLiteral2 = _interopRequireDefault(require("@babel/runtime/helpers/taggedTemplateLiteral"));

var _core = require("@emotion/core");

var _colors = require("@atlaskit/theme/colors");

function _templateObject2() {
  var data = (0, _taggedTemplateLiteral2.default)(["\n      & + svg {\n        --local-background: ", ";\n        --local-background-hover: ", ";\n        --local-background-active: ", ";\n        --local-background-checked: ", ";\n        --local-background-checked-hover: ", ";\n        --local-background-disabled: ", ";\n\n        --local-tick-rest: transparent;\n        --local-tick-checked: ", ";\n        --local-tick-disabled: ", ";\n        --local-tick-active: ", ";\n\n        --local-border: ", ";\n        --local-border-disabled: ", ";\n        --local-border-checked: ", ";\n        --local-border-active: ", ";\n        --local-border-invalid: ", ";\n        --local-border-focus: ", ";\n        --local-border-hover: ", ";\n        --local-border-checked-hover: ", ";\n        --local-border-checked-invalid: ", ";\n      }\n    "]);

  _templateObject2 = function _templateObject2() {
    return data;
  };

  return data;
}

function _templateObject() {
  var data = (0, _taggedTemplateLiteral2.default)(["\n  /* Make the input invisible */\n  -webkit-appearance: none;\n  -moz-appearance: none;\n  margin: 0;\n\n  /*\n    Change the variables --checkbox-background-color, --checkbox-border-color\n    and --checkbox-tick-color according to user interactions.\n    All other variables are constant.\n    All styles from the input target the sibling svg.\n  */\n  & + svg {\n    --checkbox-background-color: var(--local-background);\n    --checkbox-border-color: var(--local-border);\n    --checkbox-tick-color: var(--local-tick-rest);\n    /* Color changes the background color */\n    color: var(--checkbox-background-color);\n    /* Fill changes the tick color */\n    fill: var(--checkbox-tick-color);\n    transition: color 0.2s ease-in-out, fill 0.2s ease-in-out;\n    flex-shrink: 0;\n    /* If the label is multiple lines, don't center the checkbox */\n    align-self: flex-start;\n  }\n  & + svg rect:first-of-type {\n    /* Stroke changes the color of the border */\n    stroke: var(--checkbox-border-color);\n    stroke-width: 2px;\n    transition: stroke 0.2s ease-in-out;\n  }\n\n  /* Styles are listed in order of increasing specificity  */\n\n  /*\n    Compiled will order the pseudo classes by LVFHA\n    As the background colour changes on hover, it is okay for the\n    border focus colour to take precedence over hover.\n    && is used to make the focus styles more specific than the hover\n    styles\n   */\n  &&:focus + svg,\n  &&:checked:focus + svg {\n    --checkbox-border-color: var(--local-border-focus);\n  }\n\n  &:hover + svg {\n    --checkbox-background-color: var(--local-background-hover);\n    --checkbox-border-color: var(--local-border-hover);\n  }\n  &:checked:hover + svg {\n    --checkbox-background-color: var(--local-background-checked-hover);\n    --checkbox-border-color: var(--local-border-checked-hover);\n  }\n\n  &:checked + svg {\n    --checkbox-background-color: var(--local-background-checked);\n    --checkbox-border-color: var(--local-border-checked);\n    --checkbox-tick-color: var(--local-tick-checked);\n  }\n\n  &[data-invalid] + svg {\n    --checkbox-border-color: var(--local-border-invalid);\n  }\n  &:checked[data-invalid] + svg {\n    --checkbox-border-color: var(--local-border-checked-invalid);\n  }\n\n  &:active + svg {\n    --checkbox-background-color: var(--local-background-active);\n    --checkbox-border-color: var(--local-border-active);\n  }\n  &:checked:active + svg {\n    --checkbox-tick-color: var(--local-tick-active);\n    --checkbox-background-color: var(--local-background-active);\n    --checkbox-border-color: var(--local-border-active);\n  }\n\n  &:disabled + svg,\n  &:disabled:hover + svg,\n  &:disabled:focus + svg,\n  &:disabled:active + svg,\n  &:disabled[data-invalid] + svg {\n    --checkbox-background-color: var(--local-background-disabled);\n    --checkbox-border-color: var(--local-border-disabled);\n    pointer-events: none;\n    cursor: not-allowed;\n  }\n\n  &:disabled:checked + svg {\n    --checkbox-tick-color: var(--local-tick-disabled);\n  }\n"]);

  _templateObject = function _templateObject() {
    return data;
  };

  return data;
}

var checkboxStyles = (0, _core.css)(_templateObject());
var checkboxThemeColors = {
  light: {
    borderColor: {
      rest: _colors.N40,
      disabled: _colors.N20,
      checked: _colors.B400,
      active: _colors.B50,
      invalid: _colors.R300,
      invalidAndChecked: _colors.R300,
      focused: _colors.B100,
      hovered: _colors.N40,
      hoveredAndChecked: _colors.B300
    },
    boxColor: {
      rest: _colors.N10,
      disabled: _colors.N20,
      active: _colors.B50,
      hoveredAndChecked: _colors.B300,
      hovered: _colors.N30,
      checked: _colors.B400
    },
    tickColor: {
      disabledAndChecked: _colors.N70,
      activeAndChecked: _colors.B400,
      checked: _colors.N10
    }
  },
  dark: {
    borderColor: {
      rest: _colors.DN80,
      disabled: _colors.DN10,
      checked: _colors.B400,
      active: _colors.B200,
      invalid: _colors.R300,
      invalidAndChecked: _colors.R300,
      focused: _colors.B75,
      hovered: _colors.DN200,
      hoveredAndChecked: _colors.B75
    },
    boxColor: {
      rest: _colors.DN10,
      disabled: _colors.DN10,
      active: _colors.B200,
      hoveredAndChecked: _colors.B75,
      hovered: _colors.DN30,
      checked: _colors.B400
    },
    tickColor: {
      disabledAndChecked: _colors.DN90,
      activeAndChecked: _colors.DN10,
      checked: _colors.DN10
    }
  }
};

var getCheckboxStyles = function getCheckboxStyles(mode) {
  var checkboxColors = checkboxThemeColors[mode];
  var boxColor = checkboxColors.boxColor;
  var tickColor = checkboxColors.tickColor;
  var borderColor = checkboxColors.borderColor;
  return [(0, _core.css)(_templateObject2(), boxColor.rest, boxColor.hovered, boxColor.active, boxColor.checked, boxColor.hoveredAndChecked, boxColor.disabled, tickColor.checked, tickColor.disabledAndChecked, tickColor.activeAndChecked, borderColor.rest, borderColor.disabled, borderColor.checked, borderColor.active, borderColor.invalid, borderColor.focused, borderColor.hovered, borderColor.hoveredAndChecked, borderColor.invalidAndChecked), checkboxStyles];
};

var _default = getCheckboxStyles;
exports.default = _default;