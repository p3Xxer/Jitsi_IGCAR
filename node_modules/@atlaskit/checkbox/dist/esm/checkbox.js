import _extends from "@babel/runtime/helpers/extends";
import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";

/**  @jsx jsx */
import { forwardRef, memo, useCallback, useMemo, useState } from 'react';
import { jsx } from '@emotion/core';
import { usePlatformLeafEventHandler } from '@atlaskit/analytics-next/usePlatformLeafEventHandler';
import GlobalTheme from '@atlaskit/theme/components';
import { getCheckboxStyles, Label, LabelText, RequiredIndicator } from './internal';
import { name as packageName, version as packageVersion } from './version.json';
var sizes = {
  small: '16',
  medium: '24',
  large: '32',
  xlarge: '48'
}; // An svg is used so we don't pull in styled-components as well as
// a wrapping span. This approach is more performant.

var CheckboxIcon = /*#__PURE__*/memo(function (_ref) {
  var size = _ref.size,
      isIndeterminate = _ref.isIndeterminate;
  return jsx("svg", {
    width: sizes[size],
    height: sizes[size],
    viewBox: "0 0 24 24"
  }, jsx("g", {
    fillRule: "evenodd"
  }, jsx("rect", {
    fill: "currentColor",
    x: "6",
    y: "6",
    width: "12",
    height: "12",
    rx: "2"
  }), isIndeterminate ? jsx("rect", {
    fill: "inherit",
    x: "8",
    y: "11",
    width: "8",
    height: "2",
    rx: "1"
  }) : jsx("path", {
    d: "M9.707 11.293a1 1 0 1 0-1.414 1.414l2 2a1 1 0 0 0 1.414 0l4-4a1 1 0 1 0-1.414-1.414L11 12.586l-1.293-1.293z",
    fill: "inherit"
  })));
});
var CheckboxWithMode = /*#__PURE__*/forwardRef(function Checkbox(props, ref) {
  var isCheckedProp = props.isChecked,
      _props$isDisabled = props.isDisabled,
      isDisabled = _props$isDisabled === void 0 ? false : _props$isDisabled,
      _props$isInvalid = props.isInvalid,
      isInvalid = _props$isInvalid === void 0 ? false : _props$isInvalid,
      _props$defaultChecked = props.defaultChecked,
      defaultChecked = _props$defaultChecked === void 0 ? false : _props$defaultChecked,
      _props$isIndeterminat = props.isIndeterminate,
      isIndeterminate = _props$isIndeterminat === void 0 ? false : _props$isIndeterminat,
      _props$size = props.size,
      size = _props$size === void 0 ? 'medium' : _props$size,
      onChangeProps = props.onChange,
      analyticsContext = props.analyticsContext,
      label = props.label,
      mode = props.mode,
      name = props.name,
      value = props.value,
      isRequired = props.isRequired,
      testId = props.testId,
      rest = _objectWithoutProperties(props, ["isChecked", "isDisabled", "isInvalid", "defaultChecked", "isIndeterminate", "size", "onChange", "analyticsContext", "label", "mode", "name", "value", "isRequired", "testId"]);

  var _useState = useState(isCheckedProp !== undefined ? isCheckedProp : defaultChecked),
      _useState2 = _slicedToArray(_useState, 2),
      isCheckedState = _useState2[0],
      setIsCheckedState = _useState2[1];

  var onChange = useCallback(function (e, analyticsEvent) {
    setIsCheckedState(e.target.checked);

    if (onChangeProps) {
      onChangeProps(e, analyticsEvent);
    }
  }, [onChangeProps]);
  var onChangeAnalytics = usePlatformLeafEventHandler({
    fn: onChange,
    action: 'changed',
    analyticsData: analyticsContext,
    componentName: 'checkbox',
    packageName: packageName,
    packageVersion: packageVersion
  }); // Use isChecked from the state if it is controlled

  var isChecked = isCheckedProp === undefined ? isCheckedState : isCheckedProp; // The styles are being generated for the input but are being
  // applied to the svg with a sibling selector so we have access
  // to the pseudo-classes of the input

  var styles = useMemo(function () {
    return getCheckboxStyles(mode);
  }, [mode]);
  return jsx(Label, {
    isDisabled: isDisabled,
    testId: testId && "".concat(testId, "--checkbox-label")
  }, jsx("input", _extends({}, rest, {
    type: "checkbox",
    ref: ref,
    disabled: isDisabled,
    checked: isChecked,
    value: value,
    name: name,
    required: isRequired,
    css: styles,
    onChange: onChangeAnalytics,
    "aria-checked": isIndeterminate ? 'mixed' : isChecked,
    "data-testid": testId && "".concat(testId, "--hidden-checkbox"),
    "data-invalid": isInvalid ? 'true' : undefined
  })), jsx(CheckboxIcon, {
    size: size,
    isIndeterminate: isIndeterminate
  }), jsx(LabelText, null, label, isRequired && jsx(RequiredIndicator, {
    "aria-hidden": "true"
  })));
});
export var Checkbox = /*#__PURE__*/memo( /*#__PURE__*/forwardRef(function Checkbox(props, ref) {
  return jsx(GlobalTheme.Consumer, null, function (_ref2) {
    var mode = _ref2.mode;
    return jsx(CheckboxWithMode, _extends({}, props, {
      ref: ref,
      mode: mode
    }));
  });
}));
Checkbox.displayName = 'Checkbox';
export default Checkbox;