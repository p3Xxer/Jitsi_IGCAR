import _extends from "@babel/runtime/helpers/extends";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
import React from 'react';
import Portal from '@atlaskit/portal';
import { layers } from '@atlaskit/theme/constants';
import Modal from './Modal';
import { ModalTransitionConsumer } from './ModalTransition';
import StackConsumer from './StackConsumer';

class ModalWrapper extends React.Component {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "onModalClosed", onExited => e => {
      if (onExited) {
        onExited();
      }

      if (this.props.onCloseComplete) {
        this.props.onCloseComplete(e);
      }
    });
  }

  render() {
    return /*#__PURE__*/React.createElement(ModalTransitionConsumer, null, ({
      isOpen,
      onExited
    }) => /*#__PURE__*/React.createElement(Portal, {
      zIndex: layers.modal()
    }, /*#__PURE__*/React.createElement(StackConsumer, {
      isOpen: isOpen
    }, naturalStackIndex => /*#__PURE__*/React.createElement(Modal, _extends({}, this.props, {
      isOpen: isOpen,
      stackIndex: this.props.stackIndex || naturalStackIndex,
      onCloseComplete: this.onModalClosed(onExited)
    }), this.props.children))));
  }

}

_defineProperty(ModalWrapper, "defaultProps", {
  autoFocus: true,
  scrollBehavior: 'inside',
  shouldCloseOnEscapePress: true,
  shouldCloseOnOverlayClick: true,
  isChromeless: false,
  width: 'medium',
  isHeadingMultiline: true,
  onClose: () => {}
});

export default ModalWrapper;