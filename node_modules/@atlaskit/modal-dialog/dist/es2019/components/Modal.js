import _defineProperty from "@babel/runtime/helpers/defineProperty";
import React from 'react';
import { canUseDOM } from 'exenv';
import { UIDConsumer, UIDReset } from 'react-uid';
import { createAndFireEvent, withAnalyticsContext, withAnalyticsEvents } from '@atlaskit/analytics-next';
import Blanket from '@atlaskit/blanket';
import { WIDTH_ENUM } from '../shared-variables';
import { Dialog, FillScreen as StyledFillScreen } from '../styled/Modal';
import { name as packageName, version as packageVersion } from '../version.json';
import { Animation } from './Animation';
import Content from './Content';
import FocusLock from './FocusLock';
import Positioner from './Positioner';

function getScrollDistance() {
  return window.pageYOffset || document.documentElement && document.documentElement.scrollTop || document.body && document.body.scrollTop || 0;
}

class Modal extends React.Component {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "state", {
      dialogNode: null,
      scrollDistance: canUseDOM ? getScrollDistance() : 0,
      isExiting: false
    });

    _defineProperty(this, "handleWindowScroll", () => {
      if (getScrollDistance() !== this.state.scrollDistance) {
        window.scrollTo(window.pageXOffset, this.state.scrollDistance);
      }
    });

    _defineProperty(this, "handleOverlayClick", e => {
      if (this.props.shouldCloseOnOverlayClick) {
        this.props.onClose(e);
      }
    });
  }

  componentDidMount() {
    const scrollDistance = getScrollDistance();

    if (getScrollDistance() !== this.state.scrollDistance) {
      // eslint-disable-next-line react/no-did-mount-set-state
      this.setState({
        scrollDistance
      });
    }

    window.addEventListener('scroll', this.handleWindowScroll);
  }

  componentWillUnmount() {
    window.removeEventListener('scroll', this.handleWindowScroll);
  }
  /* Prevent window from being scrolled programatically so that the modal is positioned correctly
   * and to prevent scrollIntoView from scrolling the window.
   */


  render() {
    const {
      actions,
      appearance,
      autoFocus,
      body,
      children,
      components,
      footer,
      header,
      height,
      isBlanketHidden,
      isChromeless,
      isHeadingMultiline,
      isOpen,
      onClose,
      onCloseComplete,
      onOpenComplete,
      onStackChange,
      shouldCloseOnEscapePress,
      stackIndex,
      heading,
      width,
      scrollBehavior,
      testId
    } = this.props;
    const {
      scrollDistance
    } = this.state;
    const isBackground = stackIndex != null && stackIndex > 0; // If a custom width (number or percentage) is supplied, set inline style
    // otherwise allow styled component to consume as named prop

    const widthName = width ? WIDTH_ENUM.values.indexOf(width.toString()) !== -1 ? width : undefined : undefined;
    const widthValue = widthName ? undefined : width;
    return /*#__PURE__*/React.createElement(Animation, {
      in: isOpen,
      onExited: onCloseComplete,
      onEntered: onOpenComplete,
      stackIndex: stackIndex
    }, ({
      fade,
      slide
    }) => /*#__PURE__*/React.createElement(StyledFillScreen, {
      style: fade,
      "aria-hidden": isBackground,
      scrollDistance: scrollDistance
    }, /*#__PURE__*/React.createElement(FocusLock, {
      isEnabled: stackIndex === 0 && isOpen,
      autoFocus: autoFocus
    }, /*#__PURE__*/React.createElement(Blanket, {
      isTinted: !isBlanketHidden,
      onBlanketClicked: this.handleOverlayClick
    }), /*#__PURE__*/React.createElement(Positioner, {
      style: slide,
      scrollBehavior: scrollBehavior,
      widthName: widthName,
      widthValue: widthValue
    }, /*#__PURE__*/React.createElement(UIDReset, null, /*#__PURE__*/React.createElement(UIDConsumer, null, (id, _) => /*#__PURE__*/React.createElement(Dialog, {
      heightValue: height,
      isChromeless: isChromeless,
      role: "dialog",
      "aria-labelledby": `dialog-heading-${id}`,
      "data-testid": testId,
      tabIndex: -1
    }, /*#__PURE__*/React.createElement(Content, {
      actions: actions,
      appearance: appearance,
      components: components,
      footer: footer,
      heading: heading,
      headingId: `dialog-heading-${id}`,
      testId: testId && `${testId}-dialog-content`,
      isHeadingMultiline: isHeadingMultiline,
      header: header,
      onClose: onClose,
      shouldScroll: scrollBehavior === 'inside' || scrollBehavior === 'inside-wide',
      shouldCloseOnEscapePress: shouldCloseOnEscapePress,
      onStackChange: onStackChange,
      isChromeless: isChromeless,
      stackIndex: stackIndex,
      body: body
    }, children))))))));
  }

}

_defineProperty(Modal, "defaultProps", {
  autoFocus: true,
  scrollBehavior: 'inside',
  shouldCloseOnEscapePress: true,
  shouldCloseOnOverlayClick: true,
  isBlanketHidden: false,
  isChromeless: false,
  isOpen: true,
  stackIndex: 0,
  width: 'medium',
  isHeadingMultiline: true,
  onClose: () => {}
});

const createAndFireEventOnAtlaskit = createAndFireEvent('atlaskit');
export const ModalDialogWithoutAnalytics = Modal;
export default withAnalyticsContext({
  componentName: 'modalDialog',
  packageName,
  packageVersion
})(withAnalyticsEvents({
  onClose: createAndFireEventOnAtlaskit({
    action: 'closed',
    actionSubject: 'modalDialog',
    attributes: {
      componentName: 'modalDialog',
      packageName,
      packageVersion
    }
  })
})(Modal));