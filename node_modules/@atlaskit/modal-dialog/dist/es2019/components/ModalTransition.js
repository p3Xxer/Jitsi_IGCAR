import _defineProperty from "@babel/runtime/helpers/defineProperty";
import React from 'react';
const {
  Consumer,
  Provider
} = /*#__PURE__*/React.createContext({
  isOpen: true,
  onExited: () => {}
}); // checks if children exist and are truthy

const hasChildren = children => React.Children.count(children) > 0 && React.Children.map(children, child => !!child).filter(Boolean).length > 0;

class Transition extends React.Component {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "state", {
      currentChildren: undefined
    });

    _defineProperty(this, "onExited", () => {
      this.setState({
        currentChildren: this.props.children
      });
    });
  }

  static getDerivedStateFromProps(props, state) {
    const {
      currentChildren: previousChildren
    } = state;
    const exiting = hasChildren(previousChildren) && !hasChildren(props.children);
    return {
      currentChildren: exiting ? previousChildren : props.children
    };
  }

  render() {
    return /*#__PURE__*/React.createElement(Provider, {
      value: {
        onExited: this.onExited,
        isOpen: hasChildren(this.props.children)
      }
    }, this.state.currentChildren);
  }

}

export const ModalTransitionConsumer = Consumer;
export default Transition;