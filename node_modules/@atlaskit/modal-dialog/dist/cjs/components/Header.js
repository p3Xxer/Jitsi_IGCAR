"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _core = require("@emotion/core");

var _error = _interopRequireDefault(require("@atlaskit/icon/glyph/error"));

var _warning = _interopRequireDefault(require("@atlaskit/icon/glyph/warning"));

var _Content = require("../styled/Content");

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

var TitleIcon = function TitleIcon(_ref) {
  var appearance = _ref.appearance;

  if (!appearance) {
    return null;
  }

  var Icon = appearance === 'danger' ? _error.default : _warning.default;
  return (0, _core.jsx)("span", {
    css: (0, _Content.titleIconWrapperStyles)(appearance)
  }, (0, _core.jsx)(Icon, {
    label: "".concat(appearance, " icon")
  }));
};

var ModalHeader = /*#__PURE__*/function (_React$Component) {
  (0, _inherits2.default)(ModalHeader, _React$Component);

  var _super = _createSuper(ModalHeader);

  function ModalHeader() {
    (0, _classCallCheck2.default)(this, ModalHeader);
    return _super.apply(this, arguments);
  }

  (0, _createClass2.default)(ModalHeader, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          id = _this$props.id,
          appearance = _this$props.appearance,
          component = _this$props.component,
          heading = _this$props.heading,
          onClose = _this$props.onClose,
          showKeyline = _this$props.showKeyline,
          isHeadingMultiline = _this$props.isHeadingMultiline,
          testId = _this$props.testId;
      var warning = 'You can provide `component` OR `heading`, not both.';

      if (!component && !heading) {
        return null;
      }

      if (component && heading) {
        console.warn(warning); // eslint-disable-line no-console

        return null;
      }

      if (component) {
        return /*#__PURE__*/_react.default.createElement(component, {
          id: id,
          testId: testId,
          appearance: appearance,
          onClose: onClose,
          showKeyline: showKeyline,
          isHeadingMultiline: isHeadingMultiline
        });
      }

      return (0, _core.jsx)(_Content.Header, {
        showKeyline: showKeyline
      }, (0, _core.jsx)(_Content.Title, null, (0, _core.jsx)(TitleIcon, {
        appearance: appearance
      }), (0, _core.jsx)(_Content.TitleText, {
        isHeadingMultiline: isHeadingMultiline,
        id: id,
        "data-testid": testId && "".concat(testId, "-heading")
      }, heading)));
    }
  }]);
  return ModalHeader;
}(_react.default.Component);

exports.default = ModalHeader;
(0, _defineProperty2.default)(ModalHeader, "defaultProps", {
  isHeadingMultiline: true
});