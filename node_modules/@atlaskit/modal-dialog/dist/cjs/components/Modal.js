"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.ModalDialogWithoutAnalytics = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _exenv = require("exenv");

var _reactUid = require("react-uid");

var _analyticsNext = require("@atlaskit/analytics-next");

var _blanket = _interopRequireDefault(require("@atlaskit/blanket"));

var _sharedVariables = require("../shared-variables");

var _Modal = require("../styled/Modal");

var _version = require("../version.json");

var _Animation = require("./Animation");

var _Content = _interopRequireDefault(require("./Content"));

var _FocusLock = _interopRequireDefault(require("./FocusLock"));

var _Positioner = _interopRequireDefault(require("./Positioner"));

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function getScrollDistance() {
  return window.pageYOffset || document.documentElement && document.documentElement.scrollTop || document.body && document.body.scrollTop || 0;
}

var Modal = /*#__PURE__*/function (_React$Component) {
  (0, _inherits2.default)(Modal, _React$Component);

  var _super = _createSuper(Modal);

  function Modal() {
    var _this;

    (0, _classCallCheck2.default)(this, Modal);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "state", {
      dialogNode: null,
      scrollDistance: _exenv.canUseDOM ? getScrollDistance() : 0,
      isExiting: false
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "handleWindowScroll", function () {
      if (getScrollDistance() !== _this.state.scrollDistance) {
        window.scrollTo(window.pageXOffset, _this.state.scrollDistance);
      }
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "handleOverlayClick", function (e) {
      if (_this.props.shouldCloseOnOverlayClick) {
        _this.props.onClose(e);
      }
    });
    return _this;
  }

  (0, _createClass2.default)(Modal, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      var scrollDistance = getScrollDistance();

      if (getScrollDistance() !== this.state.scrollDistance) {
        // eslint-disable-next-line react/no-did-mount-set-state
        this.setState({
          scrollDistance: scrollDistance
        });
      }

      window.addEventListener('scroll', this.handleWindowScroll);
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      window.removeEventListener('scroll', this.handleWindowScroll);
    }
    /* Prevent window from being scrolled programatically so that the modal is positioned correctly
     * and to prevent scrollIntoView from scrolling the window.
     */

  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      var _this$props = this.props,
          actions = _this$props.actions,
          appearance = _this$props.appearance,
          autoFocus = _this$props.autoFocus,
          body = _this$props.body,
          children = _this$props.children,
          components = _this$props.components,
          footer = _this$props.footer,
          header = _this$props.header,
          height = _this$props.height,
          isBlanketHidden = _this$props.isBlanketHidden,
          isChromeless = _this$props.isChromeless,
          isHeadingMultiline = _this$props.isHeadingMultiline,
          isOpen = _this$props.isOpen,
          onClose = _this$props.onClose,
          onCloseComplete = _this$props.onCloseComplete,
          onOpenComplete = _this$props.onOpenComplete,
          onStackChange = _this$props.onStackChange,
          shouldCloseOnEscapePress = _this$props.shouldCloseOnEscapePress,
          stackIndex = _this$props.stackIndex,
          heading = _this$props.heading,
          width = _this$props.width,
          scrollBehavior = _this$props.scrollBehavior,
          testId = _this$props.testId;
      var scrollDistance = this.state.scrollDistance;
      var isBackground = stackIndex != null && stackIndex > 0; // If a custom width (number or percentage) is supplied, set inline style
      // otherwise allow styled component to consume as named prop

      var widthName = width ? _sharedVariables.WIDTH_ENUM.values.indexOf(width.toString()) !== -1 ? width : undefined : undefined;
      var widthValue = widthName ? undefined : width;
      return /*#__PURE__*/_react.default.createElement(_Animation.Animation, {
        in: isOpen,
        onExited: onCloseComplete,
        onEntered: onOpenComplete,
        stackIndex: stackIndex
      }, function (_ref) {
        var fade = _ref.fade,
            slide = _ref.slide;
        return /*#__PURE__*/_react.default.createElement(_Modal.FillScreen, {
          style: fade,
          "aria-hidden": isBackground,
          scrollDistance: scrollDistance
        }, /*#__PURE__*/_react.default.createElement(_FocusLock.default, {
          isEnabled: stackIndex === 0 && isOpen,
          autoFocus: autoFocus
        }, /*#__PURE__*/_react.default.createElement(_blanket.default, {
          isTinted: !isBlanketHidden,
          onBlanketClicked: _this2.handleOverlayClick
        }), /*#__PURE__*/_react.default.createElement(_Positioner.default, {
          style: slide,
          scrollBehavior: scrollBehavior,
          widthName: widthName,
          widthValue: widthValue
        }, /*#__PURE__*/_react.default.createElement(_reactUid.UIDReset, null, /*#__PURE__*/_react.default.createElement(_reactUid.UIDConsumer, null, function (id, _) {
          return /*#__PURE__*/_react.default.createElement(_Modal.Dialog, {
            heightValue: height,
            isChromeless: isChromeless,
            role: "dialog",
            "aria-labelledby": "dialog-heading-".concat(id),
            "data-testid": testId,
            tabIndex: -1
          }, /*#__PURE__*/_react.default.createElement(_Content.default, {
            actions: actions,
            appearance: appearance,
            components: components,
            footer: footer,
            heading: heading,
            headingId: "dialog-heading-".concat(id),
            testId: testId && "".concat(testId, "-dialog-content"),
            isHeadingMultiline: isHeadingMultiline,
            header: header,
            onClose: onClose,
            shouldScroll: scrollBehavior === 'inside' || scrollBehavior === 'inside-wide',
            shouldCloseOnEscapePress: shouldCloseOnEscapePress,
            onStackChange: onStackChange,
            isChromeless: isChromeless,
            stackIndex: stackIndex,
            body: body
          }, children));
        })))));
      });
    }
  }]);
  return Modal;
}(_react.default.Component);

(0, _defineProperty2.default)(Modal, "defaultProps", {
  autoFocus: true,
  scrollBehavior: 'inside',
  shouldCloseOnEscapePress: true,
  shouldCloseOnOverlayClick: true,
  isBlanketHidden: false,
  isChromeless: false,
  isOpen: true,
  stackIndex: 0,
  width: 'medium',
  isHeadingMultiline: true,
  onClose: function onClose() {}
});
var createAndFireEventOnAtlaskit = (0, _analyticsNext.createAndFireEvent)('atlaskit');
var ModalDialogWithoutAnalytics = Modal;
exports.ModalDialogWithoutAnalytics = ModalDialogWithoutAnalytics;

var _default = (0, _analyticsNext.withAnalyticsContext)({
  componentName: 'modalDialog',
  packageName: _version.name,
  packageVersion: _version.version
})((0, _analyticsNext.withAnalyticsEvents)({
  onClose: createAndFireEventOnAtlaskit({
    action: 'closed',
    actionSubject: 'modalDialog',
    attributes: {
      componentName: 'modalDialog',
      packageName: _version.name,
      packageVersion: _version.version
    }
  })
})(Modal));

exports.default = _default;