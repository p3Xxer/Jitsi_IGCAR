import _extends from "@babel/runtime/helpers/extends";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _assertThisInitialized from "@babel/runtime/helpers/assertThisInitialized";
import _inherits from "@babel/runtime/helpers/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _defineProperty from "@babel/runtime/helpers/defineProperty";

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

/** @jsx jsx */
import React from 'react';
import { jsx } from '@emotion/core';
import rafSchedule from 'raf-schd';
import ScrollLock, { TouchScrollable } from 'react-scrolllock';
import { bodyStyles, Body as DefaultBody, keylineHeight, wrapperStyles } from '../styled/Content';
import Footer from './Footer';
import Header from './Header';

function getInitialState() {
  return {
    showFooterKeyline: false,
    showHeaderKeyline: false,
    showContentFocus: false,
    tabbableElements: []
  };
}

function mergeRefs(refs) {
  return function (value) {
    refs.forEach(function (ref) {
      if (typeof ref === 'function') {
        ref(value);
      } else if (ref != null) {
        ref.current = value;
      }
    });
  };
}

var Content = /*#__PURE__*/function (_React$Component) {
  _inherits(Content, _React$Component);

  var _super = _createSuper(Content);

  function Content() {
    var _this;

    _classCallCheck(this, Content);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _defineProperty(_assertThisInitialized(_this), "escapeIsHeldDown", false);

    _defineProperty(_assertThisInitialized(_this), "_isMounted", false);

    _defineProperty(_assertThisInitialized(_this), "scrollContainer", null);

    _defineProperty(_assertThisInitialized(_this), "state", getInitialState());

    _defineProperty(_assertThisInitialized(_this), "determineKeylines", rafSchedule(function () {
      if (!_this.scrollContainer) {
        return;
      }

      var _this$scrollContainer = _this.scrollContainer,
          scrollTop = _this$scrollContainer.scrollTop,
          scrollHeight = _this$scrollContainer.scrollHeight,
          clientHeight = _this$scrollContainer.clientHeight;
      var scrollableDistance = scrollHeight - clientHeight;
      var showHeaderKeyline = scrollTop > keylineHeight;
      var showFooterKeyline = scrollTop <= scrollableDistance - keylineHeight;
      var showContentFocus = scrollHeight > clientHeight;

      _this.setState({
        showHeaderKeyline: showHeaderKeyline,
        showFooterKeyline: showFooterKeyline,
        showContentFocus: showContentFocus
      });
    }));

    _defineProperty(_assertThisInitialized(_this), "getScrollContainer", function (ref) {
      if (!ref) {
        return;
      }

      _this.scrollContainer = ref;
    });

    _defineProperty(_assertThisInitialized(_this), "handleKeyUp", function () {
      _this.escapeIsHeldDown = false;
    });

    _defineProperty(_assertThisInitialized(_this), "handleKeyDown", function (event) {
      var _this$props = _this.props,
          onClose = _this$props.onClose,
          shouldCloseOnEscapePress = _this$props.shouldCloseOnEscapePress,
          _this$props$stackInde = _this$props.stackIndex,
          stackIndex = _this$props$stackInde === void 0 ? 0 : _this$props$stackInde;
      var isEscapeKeyPressed = event.key === 'Escape'; // avoid consumers accidentally closing multiple modals if they hold escape.

      if (_this.escapeIsHeldDown) {
        return;
      }

      if (isEscapeKeyPressed) {
        _this.escapeIsHeldDown = true;
      } // only the foremost modal should be interactive.


      if (!_this._isMounted || stackIndex > 0) {
        return;
      }

      if (isEscapeKeyPressed && shouldCloseOnEscapePress) {
        onClose(event);
      }
    });

    _defineProperty(_assertThisInitialized(_this), "handleStackChange", function (stackIndex) {
      var onStackChange = _this.props.onStackChange;

      if (onStackChange) {
        onStackChange(stackIndex);
      }
    });

    return _this;
  }

  _createClass(Content, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      this._isMounted = true;
      document.addEventListener('keydown', this.handleKeyDown, false);
      document.addEventListener('keyup', this.handleKeyUp, false);

      if (this.scrollContainer) {
        var capturedScrollContainer = this.scrollContainer;
        window.addEventListener('resize', this.determineKeylines, false);
        capturedScrollContainer.addEventListener('scroll', this.determineKeylines, false);
        this.determineKeylines();
      }
      /* eslint-disable no-console */
      // Check for deprecated props


      if (this.props.header) {
        console.warn("@atlaskit/modal-dialog: Deprecation warning - Use of the header prop in ModalDialog is deprecated. Please compose your ModalDialog using the 'components' prop instead");
      }

      if (this.props.footer) {
        console.warn("@atlaskit/modal-dialog: Deprecation warning - Use of the footer prop in ModalDialog is deprecated. Please compose your ModalDialog using the 'components' prop instead");
      }

      if (this.props.body) {
        console.warn("@atlaskit/modal-dialog: Deprecation warning - Use of the body prop in ModalDialog is deprecated. Please compose your ModalDialog using the 'components' prop instead");
      } // Check that custom body components have used ForwardRef to attach to a DOM element


      if (this.props.components.Body) {
        if (!(this.scrollContainer instanceof HTMLElement)) {
          console.warn('@atlaskit/modal-dialog: Warning - Ref must attach to a DOM element; check you are using forwardRef and attaching the ref to an appropriate element. Check the examples for more details.');
        }
      }
      /* eslint-enable no-console */

    }
  }, {
    key: "UNSAFE_componentWillReceiveProps",
    value: function UNSAFE_componentWillReceiveProps(nextProps) {
      var stackIndex = this.props.stackIndex; // update focus scope and let consumer know when stack index has changed

      if (nextProps.stackIndex && nextProps.stackIndex !== stackIndex) {
        this.handleStackChange(nextProps.stackIndex);
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      this._isMounted = false;
      document.removeEventListener('keydown', this.handleKeyDown, false);
      document.removeEventListener('keyup', this.handleKeyUp, false);

      if (this.scrollContainer) {
        var capturedScrollContainer = this.scrollContainer;
        window.removeEventListener('resize', this.determineKeylines, false);
        capturedScrollContainer.removeEventListener('scroll', this.determineKeylines, false);
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      var _this$props2 = this.props,
          actions = _this$props2.actions,
          appearance = _this$props2.appearance,
          DeprecatedBody = _this$props2.body,
          children = _this$props2.children,
          components = _this$props2.components,
          footer = _this$props2.footer,
          header = _this$props2.header,
          heading = _this$props2.heading,
          isChromeless = _this$props2.isChromeless,
          isHeadingMultiline = _this$props2.isHeadingMultiline,
          onClose = _this$props2.onClose,
          shouldScroll = _this$props2.shouldScroll,
          testId = _this$props2.testId,
          headingId = _this$props2.headingId;
      var _this$state = this.state,
          showFooterKeyline = _this$state.showFooterKeyline,
          showHeaderKeyline = _this$state.showHeaderKeyline,
          showContentFocus = _this$state.showContentFocus;
      var _components$Container = components.Container,
          Container = _components$Container === void 0 ? 'div' : _components$Container,
          CustomBody = components.Body;
      var Body = CustomBody || DeprecatedBody || DefaultBody;
      return jsx(Container, {
        css: wrapperStyles,
        "data-testid": testId
      }, isChromeless ? children : jsx(React.Fragment, null, jsx(Header, {
        id: headingId,
        appearance: appearance,
        component: components.Header ? components.Header : header,
        heading: heading,
        onClose: onClose,
        isHeadingMultiline: isHeadingMultiline,
        showKeyline: showHeaderKeyline,
        testId: testId
      }), this.scrollContainer instanceof HTMLElement ? jsx(TouchScrollable, null, function (touchRef) {
        return jsx(Body, _extends({
          tabIndex: showContentFocus ? 0 : undefined,
          css: bodyStyles(shouldScroll)
        }, !Body.hasOwnProperty('styledComponentId') ? {
          ref: mergeRefs([touchRef, _this2.getScrollContainer])
        } : {
          innerRef: mergeRefs([touchRef, _this2.getScrollContainer])
        }), children);
      }) : jsx(Body, _extends({
        tabIndex: showContentFocus ? 0 : undefined,
        css: bodyStyles(shouldScroll)
      }, !Body.hasOwnProperty('styledComponentId') ? {
        ref: this.getScrollContainer
      } : {
        innerRef: this.getScrollContainer
      }), children), jsx(Footer, {
        actions: actions,
        appearance: appearance,
        component: components.Footer ? components.Footer : footer,
        onClose: onClose,
        showKeyline: showFooterKeyline
      })), jsx(ScrollLock, null));
    }
  }]);

  return Content;
}(React.Component);

_defineProperty(Content, "defaultProps", {
  autoFocus: false,
  components: {},
  isChromeless: false,
  stackIndex: 0,
  isHeadingMultiline: true
});

export { Content as default };