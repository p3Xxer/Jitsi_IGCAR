import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _assertThisInitialized from "@babel/runtime/helpers/assertThisInitialized";
import _inherits from "@babel/runtime/helpers/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _defineProperty from "@babel/runtime/helpers/defineProperty";

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

import React from 'react';
import { canUseDOM } from 'exenv';
import { UIDConsumer, UIDReset } from 'react-uid';
import { createAndFireEvent, withAnalyticsContext, withAnalyticsEvents } from '@atlaskit/analytics-next';
import Blanket from '@atlaskit/blanket';
import { WIDTH_ENUM } from '../shared-variables';
import { Dialog, FillScreen as StyledFillScreen } from '../styled/Modal';
import { name as packageName, version as packageVersion } from '../version.json';
import { Animation } from './Animation';
import Content from './Content';
import FocusLock from './FocusLock';
import Positioner from './Positioner';

function getScrollDistance() {
  return window.pageYOffset || document.documentElement && document.documentElement.scrollTop || document.body && document.body.scrollTop || 0;
}

var Modal = /*#__PURE__*/function (_React$Component) {
  _inherits(Modal, _React$Component);

  var _super = _createSuper(Modal);

  function Modal() {
    var _this;

    _classCallCheck(this, Modal);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _defineProperty(_assertThisInitialized(_this), "state", {
      dialogNode: null,
      scrollDistance: canUseDOM ? getScrollDistance() : 0,
      isExiting: false
    });

    _defineProperty(_assertThisInitialized(_this), "handleWindowScroll", function () {
      if (getScrollDistance() !== _this.state.scrollDistance) {
        window.scrollTo(window.pageXOffset, _this.state.scrollDistance);
      }
    });

    _defineProperty(_assertThisInitialized(_this), "handleOverlayClick", function (e) {
      if (_this.props.shouldCloseOnOverlayClick) {
        _this.props.onClose(e);
      }
    });

    return _this;
  }

  _createClass(Modal, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      var scrollDistance = getScrollDistance();

      if (getScrollDistance() !== this.state.scrollDistance) {
        // eslint-disable-next-line react/no-did-mount-set-state
        this.setState({
          scrollDistance: scrollDistance
        });
      }

      window.addEventListener('scroll', this.handleWindowScroll);
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      window.removeEventListener('scroll', this.handleWindowScroll);
    }
    /* Prevent window from being scrolled programatically so that the modal is positioned correctly
     * and to prevent scrollIntoView from scrolling the window.
     */

  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      var _this$props = this.props,
          actions = _this$props.actions,
          appearance = _this$props.appearance,
          autoFocus = _this$props.autoFocus,
          body = _this$props.body,
          children = _this$props.children,
          components = _this$props.components,
          footer = _this$props.footer,
          header = _this$props.header,
          height = _this$props.height,
          isBlanketHidden = _this$props.isBlanketHidden,
          isChromeless = _this$props.isChromeless,
          isHeadingMultiline = _this$props.isHeadingMultiline,
          isOpen = _this$props.isOpen,
          onClose = _this$props.onClose,
          onCloseComplete = _this$props.onCloseComplete,
          onOpenComplete = _this$props.onOpenComplete,
          onStackChange = _this$props.onStackChange,
          shouldCloseOnEscapePress = _this$props.shouldCloseOnEscapePress,
          stackIndex = _this$props.stackIndex,
          heading = _this$props.heading,
          width = _this$props.width,
          scrollBehavior = _this$props.scrollBehavior,
          testId = _this$props.testId;
      var scrollDistance = this.state.scrollDistance;
      var isBackground = stackIndex != null && stackIndex > 0; // If a custom width (number or percentage) is supplied, set inline style
      // otherwise allow styled component to consume as named prop

      var widthName = width ? WIDTH_ENUM.values.indexOf(width.toString()) !== -1 ? width : undefined : undefined;
      var widthValue = widthName ? undefined : width;
      return /*#__PURE__*/React.createElement(Animation, {
        in: isOpen,
        onExited: onCloseComplete,
        onEntered: onOpenComplete,
        stackIndex: stackIndex
      }, function (_ref) {
        var fade = _ref.fade,
            slide = _ref.slide;
        return /*#__PURE__*/React.createElement(StyledFillScreen, {
          style: fade,
          "aria-hidden": isBackground,
          scrollDistance: scrollDistance
        }, /*#__PURE__*/React.createElement(FocusLock, {
          isEnabled: stackIndex === 0 && isOpen,
          autoFocus: autoFocus
        }, /*#__PURE__*/React.createElement(Blanket, {
          isTinted: !isBlanketHidden,
          onBlanketClicked: _this2.handleOverlayClick
        }), /*#__PURE__*/React.createElement(Positioner, {
          style: slide,
          scrollBehavior: scrollBehavior,
          widthName: widthName,
          widthValue: widthValue
        }, /*#__PURE__*/React.createElement(UIDReset, null, /*#__PURE__*/React.createElement(UIDConsumer, null, function (id, _) {
          return /*#__PURE__*/React.createElement(Dialog, {
            heightValue: height,
            isChromeless: isChromeless,
            role: "dialog",
            "aria-labelledby": "dialog-heading-".concat(id),
            "data-testid": testId,
            tabIndex: -1
          }, /*#__PURE__*/React.createElement(Content, {
            actions: actions,
            appearance: appearance,
            components: components,
            footer: footer,
            heading: heading,
            headingId: "dialog-heading-".concat(id),
            testId: testId && "".concat(testId, "-dialog-content"),
            isHeadingMultiline: isHeadingMultiline,
            header: header,
            onClose: onClose,
            shouldScroll: scrollBehavior === 'inside' || scrollBehavior === 'inside-wide',
            shouldCloseOnEscapePress: shouldCloseOnEscapePress,
            onStackChange: onStackChange,
            isChromeless: isChromeless,
            stackIndex: stackIndex,
            body: body
          }, children));
        })))));
      });
    }
  }]);

  return Modal;
}(React.Component);

_defineProperty(Modal, "defaultProps", {
  autoFocus: true,
  scrollBehavior: 'inside',
  shouldCloseOnEscapePress: true,
  shouldCloseOnOverlayClick: true,
  isBlanketHidden: false,
  isChromeless: false,
  isOpen: true,
  stackIndex: 0,
  width: 'medium',
  isHeadingMultiline: true,
  onClose: function onClose() {}
});

var createAndFireEventOnAtlaskit = createAndFireEvent('atlaskit');
export var ModalDialogWithoutAnalytics = Modal;
export default withAnalyticsContext({
  componentName: 'modalDialog',
  packageName: packageName,
  packageVersion: packageVersion
})(withAnalyticsEvents({
  onClose: createAndFireEventOnAtlaskit({
    action: 'closed',
    actionSubject: 'modalDialog',
    attributes: {
      componentName: 'modalDialog',
      packageName: packageName,
      packageVersion: packageVersion
    }
  })
})(Modal));