import _defineProperty from "@babel/runtime/helpers/defineProperty";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

import React from 'react';
import { Transition } from 'react-transition-group';
var duration = 500;
var easing = 'cubic-bezier(0.23, 1, 0.32, 1)'; // easeOutQuint

var verticalOffset = 16; // Animation
// ==============================
// Modal has two parts that need to be animated. Everything should fade in/out
// and the popup should slide up/up (sic). These animations happen at the same time.
// This component calls its children with the styles for both animations.

export var Animation = function Animation(_ref) {
  var hasEntered = _ref.in,
      _ref$stackIndex = _ref.stackIndex,
      stackIndex = _ref$stackIndex === void 0 ? 0 : _ref$stackIndex,
      onExited = _ref.onExited,
      onEntered = _ref.onEntered,
      children = _ref.children;
  return /*#__PURE__*/React.createElement(Transition, {
    in: hasEntered,
    timeout: {
      enter: 0,
      exit: duration
    },
    onExited: onExited,
    onEntered: onEntered,
    appear: true
  }, function (unadjustedStatus) {
    // when we first render, we want to finish the 'entering' state render
    // then jump to the 'entered' state as quick as possible.
    var adjustedStatus = hasEntered && unadjustedStatus === 'exited' ? 'entering' : unadjustedStatus; // Fade styles

    var fadeBaseStyles = {
      transition: "opacity ".concat(duration / 2, "ms"),
      opacity: 1
    };
    var fadeTransitionStyles = {
      entering: {
        opacity: 0
      },
      entered: {},
      exiting: {
        opacity: 0
      },
      exited: {}
    }; // Slide styles

    var slideBaseStyles = {
      transition: "transform ".concat(duration, "ms ").concat(easing),
      transform: "translate3d(0, ".concat(verticalOffset * 2, "px, 0)")
    };
    var slideTransitionStyles = {
      entering: {},
      entered: {
        transform: stackIndex > 0 ? "translate3d(0, ".concat(stackIndex * (verticalOffset / 2), "px, 0)") : null
      },
      exiting: {
        transform: "translate3d(0, -".concat(verticalOffset * 2, "px, 0)")
      },
      exited: {}
    };
    return children({
      fade: _objectSpread(_objectSpread({}, fadeBaseStyles), fadeTransitionStyles[adjustedStatus]),
      slide: _objectSpread(_objectSpread({}, slideBaseStyles), slideTransitionStyles[adjustedStatus])
    });
  });
};