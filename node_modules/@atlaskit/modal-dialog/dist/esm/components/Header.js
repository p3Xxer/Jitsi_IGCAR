import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _inherits from "@babel/runtime/helpers/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _defineProperty from "@babel/runtime/helpers/defineProperty";

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

/** @jsx jsx */
import React from 'react';
import { jsx } from '@emotion/core';
import ErrorIcon from '@atlaskit/icon/glyph/error';
import WarningIcon from '@atlaskit/icon/glyph/warning';
import { Header, Title, titleIconWrapperStyles, TitleText } from '../styled/Content';

var TitleIcon = function TitleIcon(_ref) {
  var appearance = _ref.appearance;

  if (!appearance) {
    return null;
  }

  var Icon = appearance === 'danger' ? ErrorIcon : WarningIcon;
  return jsx("span", {
    css: titleIconWrapperStyles(appearance)
  }, jsx(Icon, {
    label: "".concat(appearance, " icon")
  }));
};

var ModalHeader = /*#__PURE__*/function (_React$Component) {
  _inherits(ModalHeader, _React$Component);

  var _super = _createSuper(ModalHeader);

  function ModalHeader() {
    _classCallCheck(this, ModalHeader);

    return _super.apply(this, arguments);
  }

  _createClass(ModalHeader, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          id = _this$props.id,
          appearance = _this$props.appearance,
          component = _this$props.component,
          heading = _this$props.heading,
          onClose = _this$props.onClose,
          showKeyline = _this$props.showKeyline,
          isHeadingMultiline = _this$props.isHeadingMultiline,
          testId = _this$props.testId;
      var warning = 'You can provide `component` OR `heading`, not both.';

      if (!component && !heading) {
        return null;
      }

      if (component && heading) {
        console.warn(warning); // eslint-disable-line no-console

        return null;
      }

      if (component) {
        return /*#__PURE__*/React.createElement(component, {
          id: id,
          testId: testId,
          appearance: appearance,
          onClose: onClose,
          showKeyline: showKeyline,
          isHeadingMultiline: isHeadingMultiline
        });
      }

      return jsx(Header, {
        showKeyline: showKeyline
      }, jsx(Title, null, jsx(TitleIcon, {
        appearance: appearance
      }), jsx(TitleText, {
        isHeadingMultiline: isHeadingMultiline,
        id: id,
        "data-testid": testId && "".concat(testId, "-heading")
      }, heading)));
    }
  }]);

  return ModalHeader;
}(React.Component);

_defineProperty(ModalHeader, "defaultProps", {
  isHeadingMultiline: true
});

export { ModalHeader as default };