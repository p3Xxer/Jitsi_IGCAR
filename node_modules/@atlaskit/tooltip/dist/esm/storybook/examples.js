import _regeneratorRuntime from "@babel/runtime/regenerator";
import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import React, { useLayoutEffect } from 'react';
import { findByTestId, fireEvent } from '@testing-library/dom';
import Tooltip from '../../src';
export default {
  title: 'Examples'
};

function Child() {
  return /*#__PURE__*/React.createElement("div", {
    id: "tooltip-reference"
  }, "New tooltip");
}

function DefaultTooltip() {
  useLayoutEffect(function () {}, []);
  return /*#__PURE__*/React.createElement(Tooltip, {
    delay: 0,
    content: "Hello World",
    testId: "tooltip"
  }, /*#__PURE__*/React.createElement(Child, null));
}

export var tooltip = function tooltip() {
  return /*#__PURE__*/React.createElement(DefaultTooltip, null);
};
var interactionTasks = [{
  name: 'Display tooltip',
  description: 'Hover over div and wait for tooltip to load',
  run: function () {
    var _run = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(_ref) {
      var container, controls, element, parent, tooltip;
      return _regeneratorRuntime.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              container = _ref.container, controls = _ref.controls;
              element = container.querySelector('#tooltip-reference');

              if (element) {
                _context2.next = 4;
                break;
              }

              throw new Error('no div found');

            case 4:
              parent = container.parentElement;

              if (!(parent == null)) {
                _context2.next = 7;
                break;
              }

              throw new Error('Could not find parent element');

            case 7:
              tooltip = parent.querySelector('[data-testid="tooltip"]');

              if (!(tooltip != null)) {
                _context2.next = 10;
                break;
              }

              throw new Error('Unexpected tooltip found');

            case 10:
              _context2.next = 12;
              return controls.time( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
                return _regeneratorRuntime.wrap(function _callee$(_context) {
                  while (1) {
                    switch (_context.prev = _context.next) {
                      case 0:
                        fireEvent.mouseOver(element);
                        _context.next = 3;
                        return findByTestId(parent, 'tooltip');

                      case 3:
                      case "end":
                        return _context.stop();
                    }
                  }
                }, _callee);
              })));

            case 12:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2);
    }));

    function run(_x) {
      return _run.apply(this, arguments);
    }

    return run;
  }()
}];
tooltip.story = {
  name: 'Default Tooltip',
  parameters: {
    performance: {
      interactions: interactionTasks
    }
  }
};