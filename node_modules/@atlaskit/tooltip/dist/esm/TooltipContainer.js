import _taggedTemplateLiteral from "@babel/runtime/helpers/taggedTemplateLiteral";

function _templateObject3() {
  var data = _taggedTemplateLiteral(["\n                background-color: ", ";\n                color: ", ";\n              "]);

  _templateObject3 = function _templateObject3() {
    return data;
  };

  return data;
}

function _templateObject2() {
  var data = _taggedTemplateLiteral(["\n  max-width: 420px;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n"]);

  _templateObject2 = function _templateObject2() {
    return data;
  };

  return data;
}

function _templateObject() {
  var data = _taggedTemplateLiteral(["\n  border-radius: ", "px;\n  box-sizing: border-box;\n  font-size: 12px;\n  left: 0;\n  line-height: 1.3;\n  max-width: 240px;\n  padding: 2px 6px;\n  top: 0;\n  word-wrap: break-word;\n  overflow-wrap: break-word;\n"]);

  _templateObject = function _templateObject() {
    return data;
  };

  return data;
}

/** @jsx jsx */
import { forwardRef } from 'react';
import { css, jsx } from '@emotion/core';
import { DN0, DN600, N0, N800 } from '@atlaskit/theme/colors';
import GlobalTheme from '@atlaskit/theme/components';
import { borderRadius } from '@atlaskit/theme/constants';
import TooltipPrimitive from './TooltipPrimitive';
var baseCss = css(_templateObject(), borderRadius());
var truncateCss = css(_templateObject2());
var TooltipContainer = /*#__PURE__*/forwardRef(function TooltipContainer(_ref, ref) {
  var style = _ref.style,
      className = _ref.className,
      children = _ref.children,
      truncate = _ref.truncate,
      placement = _ref.placement,
      testId = _ref.testId;
  return jsx(GlobalTheme.Consumer, null, function (_ref2) {
    var mode = _ref2.mode;
    return jsx(TooltipPrimitive, {
      ref: ref,
      style: style,
      className: className,
      placement: placement,
      testId: testId,
      css: [baseCss, truncate ? truncateCss : null, css(_templateObject3(), mode === 'light' ? N800 : DN0, mode === 'light' ? N0 : DN600)]
    }, children);
  });
});
TooltipContainer.displayName = 'TooltipContainer';
export default TooltipContainer;