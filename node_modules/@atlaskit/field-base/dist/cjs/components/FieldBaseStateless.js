"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _typeof = require("@babel/runtime/helpers/typeof");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireWildcard(require("react"));

var _inlineDialog = _interopRequireDefault(require("@atlaskit/inline-dialog"));

var _Content = require("../styled/Content");

var _ValidationElement = _interopRequireDefault(require("./ValidationElement"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

if (process.env.NODE_ENV !== 'production' && !process.env.CI) {
  // eslint-disable-next-line no-console
  console.warn('The @atlaskit/field-base package has been deprecated. Please use the Form/Textfield/Textarea/etc packages instead.');
}

var FieldBaseStateless = /*#__PURE__*/function (_Component) {
  (0, _inherits2.default)(FieldBaseStateless, _Component);

  var _super = _createSuper(FieldBaseStateless);

  function FieldBaseStateless() {
    (0, _classCallCheck2.default)(this, FieldBaseStateless);
    return _super.apply(this, arguments);
  }

  (0, _createClass2.default)(FieldBaseStateless, [{
    key: "componentDidUpdate",
    value: function componentDidUpdate() {
      if (this.props.shouldReset) {
        this.props.onBlur();
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props = this.props,
          appearance = _this$props.appearance,
          children = _this$props.children,
          invalidMessage = _this$props.invalidMessage,
          isCompact = _this$props.isCompact,
          isDialogOpen = _this$props.isDialogOpen,
          isDisabled = _this$props.isDisabled,
          isFitContainerWidthEnabled = _this$props.isFitContainerWidthEnabled,
          isFocused = _this$props.isFocused,
          isInvalid = _this$props.isInvalid,
          isLoading = _this$props.isLoading,
          isPaddingDisabled = _this$props.isPaddingDisabled,
          isReadOnly = _this$props.isReadOnly,
          maxWidth = _this$props.maxWidth,
          onBlur = _this$props.onBlur,
          onDialogBlur = _this$props.onDialogBlur,
          onDialogClick = _this$props.onDialogClick,
          onDialogFocus = _this$props.onDialogFocus,
          onFocus = _this$props.onFocus,
          isValidationHidden = _this$props.isValidationHidden;

      function getAppearance(a) {
        if (isDisabled) return 'disabled';
        if (isInvalid) return 'invalid';
        return a;
      }

      return /*#__PURE__*/_react.default.createElement(_Content.ContentWrapper, {
        disabled: isDisabled,
        maxWidth: maxWidth,
        grow: isFitContainerWidthEnabled
      }, /*#__PURE__*/_react.default.createElement(_inlineDialog.default, {
        content: invalidMessage,
        isOpen: isDialogOpen && !!invalidMessage && !isValidationHidden,
        onContentBlur: onDialogBlur,
        onContentClick: onDialogClick,
        onContentFocus: onDialogFocus,
        placement: "right"
      }, /*#__PURE__*/_react.default.createElement(_Content.ChildWrapper, {
        compact: isCompact
      }, /*#__PURE__*/_react.default.createElement(_Content.Content, {
        appearance: getAppearance(appearance),
        compact: isCompact,
        disabled: isDisabled,
        isFocused: isFocused,
        invalid: isInvalid && !isFocused,
        none: appearance === 'none',
        onBlurCapture: onBlur,
        onFocusCapture: onFocus,
        paddingDisabled: isPaddingDisabled,
        readOnly: isReadOnly,
        subtle: appearance === 'subtle'
      }, children, !isValidationHidden ? /*#__PURE__*/_react.default.createElement(_ValidationElement.default, {
        isDisabled: isDisabled,
        isInvalid: isInvalid,
        isLoading: isLoading
      }) : null))));
    }
  }]);
  return FieldBaseStateless;
}(_react.Component);

exports.default = FieldBaseStateless;
(0, _defineProperty2.default)(FieldBaseStateless, "defaultProps", {
  appearance: 'standard',
  invalidMessage: '',
  isCompact: false,
  isDialogOpen: false,
  isDisabled: false,
  isFitContainerWidthEnabled: false,
  isFocused: false,
  isInvalid: false,
  isLoading: false,
  isPaddingDisabled: false,
  isReadOnly: false,
  onDialogBlur: function onDialogBlur() {},
  onDialogClick: function onDialogClick() {},
  onDialogFocus: function onDialogFocus() {},
  shouldReset: false,
  isValidationHidden: false
});