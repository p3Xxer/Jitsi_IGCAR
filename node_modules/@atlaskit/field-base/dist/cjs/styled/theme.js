"use strict";

var _typeof = require("@babel/runtime/helpers/typeof");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getBorderColorFocus = exports.getBorderColor = exports.getBackgroundColorHover = exports.getBackgroundColorFocus = exports.getBackgroundColor = void 0;

var _components = require("@atlaskit/theme/components");

var colors = _interopRequireWildcard(require("@atlaskit/theme/colors"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

// The following are the name for color mappings in @atlaskit/themes
// The exports are the functions, not the objects, so could not be used here
var disabled = {
  light: colors.N20,
  dark: colors.DN20
}; // For validation red is the new 'yellow' which was { light: colors.Y300, dark: colors.Y300 }

var red = {
  light: colors.R400,
  dark: colors.R400
}; // The following do not yet have a darkmode 'map': N20A, N10

var getBackgroundColor = (0, _components.themed)('appearance', {
  standard: {
    light: colors.N10,
    dark: colors.DN10
  },
  disabled: disabled,
  invalid: {
    light: colors.N10,
    dark: colors.DN10
  },
  subtle: {
    light: 'transparent',
    dark: 'transparent'
  },
  none: {
    light: 'transparent',
    dark: 'transparent'
  }
});
exports.getBackgroundColor = getBackgroundColor;
var getBackgroundColorFocus = (0, _components.themed)('appearance', {
  standard: {
    light: colors.N0,
    dark: colors.DN10
  },
  disabled: disabled,
  invalid: {
    light: colors.N0,
    dark: colors.DN10
  },
  subtle: {
    light: colors.N0,
    dark: colors.DN10
  },
  none: {
    light: 'transparent',
    dark: 'transparent'
  }
});
exports.getBackgroundColorFocus = getBackgroundColorFocus;
var getBackgroundColorHover = (0, _components.themed)('appearance', {
  standard: {
    light: colors.N30,
    dark: colors.DN30
  },
  disabled: disabled,
  invalid: {
    light: colors.N30,
    dark: colors.DN30
  },
  subtle: {
    light: colors.N30,
    dark: colors.DN30
  },
  none: {
    light: 'transparent',
    dark: 'transparent'
  }
});
exports.getBackgroundColorHover = getBackgroundColorHover;
var getBorderColor = (0, _components.themed)('appearance', {
  standard: {
    light: colors.N40,
    dark: colors.DN40
  },
  disabled: {
    light: colors.N40,
    dark: colors.DN40
  },
  invalid: red,
  subtle: {
    light: 'transparent',
    dark: 'transparent'
  },
  none: {
    light: 'transparent',
    dark: 'transparent'
  }
});
exports.getBorderColor = getBorderColor;
var getBorderColorFocus = (0, _components.themed)('appearance', {
  standard: {
    light: colors.B100,
    dark: colors.B75
  },
  disabled: {
    light: colors.B100,
    dark: colors.B75
  },
  invalid: {
    light: colors.B100,
    dark: colors.B75
  },
  subtle: {
    light: colors.B100,
    dark: colors.B75
  },
  none: {
    light: 'transparent',
    dark: 'transparent'
  }
});
exports.getBorderColorFocus = getBorderColorFocus;