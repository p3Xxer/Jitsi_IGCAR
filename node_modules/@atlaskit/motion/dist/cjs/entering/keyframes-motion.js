"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _react = _interopRequireWildcard(require("react"));

var _core = require("@emotion/core");

var _accessibility = require("../utils/accessibility");

var _durations = require("../utils/durations");

var _timerHooks = require("../utils/timer-hooks");

var _exitingPersistence = require("./exiting-persistence");

var _staggeredEntrance = require("./staggered-entrance");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

/**
 * Used to multiply the initial duration for exiting motions.
 */
var EXITING_MOTION_MULTIPLIER = 0.5;
/**
 * This is the base INTERNAL component used for all other entering motions.
 * This does not need Javascript to execute on the client so it will run immediately
 * for any SSR rendered React apps before the JS has executed.
 */

var EnteringMotion = function EnteringMotion(_ref) {
  var children = _ref.children,
      animationTimingFunction = _ref.animationTimingFunction,
      enteringAnimation = _ref.enteringAnimation,
      exitingAnimation = _ref.exitingAnimation,
      isPaused = _ref.isPaused,
      onFinishMotion = _ref.onFinish,
      _ref$duration = _ref.duration,
      duration = _ref$duration === void 0 ? _durations.largeDurationMs : _ref$duration;
  var staggered = (0, _staggeredEntrance.useStaggeredEntrance)();

  var _useExitingPersistenc = (0, _exitingPersistence.useExitingPersistence)(),
      isExiting = _useExitingPersistenc.isExiting,
      onExitFinished = _useExitingPersistenc.onFinish,
      appear = _useExitingPersistenc.appear;

  var setTimeout = (0, _timerHooks.useSetTimeout)();
  var paused = isPaused || !staggered.isReady;
  var delay = isExiting ? 0 : staggered.delay;
  var state = isExiting ? 'exiting' : 'entering';

  var _useState = (0, _react.useState)(appear),
      _useState2 = (0, _slicedToArray2.default)(_useState, 2),
      hasAnimationStyles = _useState2[0],
      setHasAnimationStyles = _useState2[1];

  (0, _react.useEffect)(function () {
    // Tracking this to prevent changing state on an unmounted component
    var isCancelled = false;

    if (paused) {
      return;
    } // On initial mount if elements aren't set to animate on appear, we return early and callback


    if (!appear) {
      onFinishMotion && onFinishMotion(state);
      return;
    } // Elements may need animation styles back after initial mount (they could animate out)


    setHasAnimationStyles(true);
    setTimeout(function () {
      if (state === 'exiting') {
        onExitFinished && onExitFinished();
      }

      if (!isCancelled) {
        setHasAnimationStyles(false);
      }

      onFinishMotion && onFinishMotion(state);
    }, isExiting ? duration * EXITING_MOTION_MULTIPLIER : duration + delay);
    return function () {
      isCancelled = true;
    }; // We ignore this for onFinishMotion as consumers could potentially inline the function
    // which would then trigger this effect every re-render.
    // We want to make it easier for consumers so we go down this path unfortunately.
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [onExitFinished, state, isExiting, duration, delay, paused, setTimeout]);
  return /*#__PURE__*/_react.default.createElement(_core.ClassNames, null, function (_ref2) {
    var css = _ref2.css;
    return children({
      ref: staggered.ref,
      className: hasAnimationStyles ? css(_objectSpread({
        animationName: "".concat((0, _core.keyframes)(isExiting ? exitingAnimation || enteringAnimation : enteringAnimation)),
        animationTimingFunction: animationTimingFunction(state),
        animationDelay: "".concat(delay, "ms"),
        animationFillMode: isExiting ? 'forwards' : 'backwards',
        animationDuration: "".concat(isExiting ? duration * EXITING_MOTION_MULTIPLIER : duration, "ms"),
        animationPlayState: paused ? 'paused' : 'running'
      }, (0, _accessibility.prefersReducedMotion)())) : ''
    }, state);
  });
};

var _default = EnteringMotion;
exports.default = _default;