import _extends from "@babel/runtime/helpers/extends";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _assertThisInitialized from "@babel/runtime/helpers/assertThisInitialized";
import _inherits from "@babel/runtime/helpers/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _defineProperty from "@babel/runtime/helpers/defineProperty";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

/** @jsx jsx */
import { Component } from 'react';
import { jsx } from '@emotion/core';
import { createAndFireEvent, withAnalyticsContext, withAnalyticsEvents } from '@atlaskit/analytics-next';
import { tabStyles } from '../internal/styles';
import { name as packageName, version as packageVersion } from '../version.json';
import DefaultTabContent from './TabContent';
import DefaultTabItem from './TabItem';
import TabsNavigation from './TabsNavigation';

var defaultIsSelectedTestNumber = function defaultIsSelectedTestNumber(selectedIndex, _tab, tabIndex) {
  return selectedIndex === tabIndex;
};

var defaultIsSelectedTestObject = function defaultIsSelectedTestObject(selected, tab) {
  return selected === tab;
};

var defaultComponents = {
  Content: DefaultTabContent,
  Item: DefaultTabItem
};

var Tabs = /*#__PURE__*/function (_Component) {
  _inherits(Tabs, _Component);

  var _super = _createSuper(Tabs);

  function Tabs(props) {
    var _this;

    _classCallCheck(this, Tabs);

    _this = _super.call(this, props);

    _defineProperty(_assertThisInitialized(_this), "resolveSelected", function (selected, newProps) {
      var _ref = newProps || _this.props,
          tabs = _ref.tabs,
          isSelectedTest = _ref.isSelectedTest;

      var testFunction = function () {
        if (isSelectedTest) {
          return isSelectedTest;
        }

        if (typeof selected === 'number') {
          return defaultIsSelectedTestNumber;
        }

        return defaultIsSelectedTestObject;
      }();

      return tabs.find(function (tab, tabIndex) {
        return testFunction(selected, tab, tabIndex);
      }) || tabs[0];
    });

    _defineProperty(_assertThisInitialized(_this), "onSelect", function (newselected, newSelectedIndex) {
      var _this$props = _this.props,
          onSelect = _this$props.onSelect,
          selected = _this$props.selected;

      if (typeof onSelect === 'function') {
        onSelect(newselected, newSelectedIndex);
      }

      if (typeof selected === 'undefined') {
        _this.setState({
          selected: newselected
        });
      }
    });

    var initiallyselected = _this.props.selected || _this.props.defaultSelected || _this.props.tabs[0];

    var _selected = _this.resolveSelected(initiallyselected);

    _this.state = {
      selected: _selected
    };
    return _this;
  }

  _createClass(Tabs, [{
    key: "UNSAFE_componentWillReceiveProps",
    value: function UNSAFE_componentWillReceiveProps(newProps) {
      if (typeof newProps.selected !== 'undefined' && newProps.selected !== this.state.selected) {
        var selected = this.resolveSelected(newProps.selected, newProps);
        this.setState({
          selected: selected
        });
      } else if (newProps.tabs !== this.props.tabs) {
        var updatedselected = this.resolveSelected(this.state.selected, newProps);
        this.setState({
          selected: updatedselected
        });
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props2 = this.props,
          components = _this$props2.components,
          tabs = _this$props2.tabs,
          testId = _this$props2.testId,
          isContentPersisted = _this$props2.isContentPersisted;
      var selected = this.state.selected;

      var _defaultComponents$co = _objectSpread(_objectSpread({}, defaultComponents), components),
          Content = _defaultComponents$co.Content,
          Item = _defaultComponents$co.Item;

      var contents = function contents() {
        return tabs.map(function (tab, index) {
          var isSelected = tab === selected;
          var contentProps = {
            data: tab,
            elementProps: {
              role: 'tabpanel'
            },
            isSelected: isSelected
          };
          return jsx(Content, _extends({
            key: index
          }, contentProps));
        });
      };

      var contentProps = {
        data: selected,
        elementProps: {
          role: 'tabpanel'
        },
        isSelected: true
      };
      return jsx("div", {
        "data-testid": testId,
        css: tabStyles
      }, jsx(TabsNavigation, {
        component: Item,
        onSelect: this.onSelect,
        selected: selected,
        tabs: tabs
      }), isContentPersisted ? contents() : jsx(Content, contentProps));
    }
  }]);

  return Tabs;
}(Component);

_defineProperty(Tabs, "defaultProps", {
  components: {},
  isContentPersisted: false
});

export { Tabs as TabsWithoutAnalytics };
var createAndFireEventOnAtlaskit = createAndFireEvent('atlaskit');
export default withAnalyticsContext({
  componentName: 'tabs',
  packageName: packageName,
  packageVersion: packageVersion
})(withAnalyticsEvents({
  onSelect: createAndFireEventOnAtlaskit({
    action: 'clicked',
    actionSubject: 'tab',
    attributes: {
      componentName: 'tabs',
      packageName: packageName,
      packageVersion: packageVersion
    }
  })
})(Tabs));