import _extends from "@babel/runtime/helpers/extends";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _inherits from "@babel/runtime/helpers/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _defineProperty from "@babel/runtime/helpers/defineProperty";

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

/** @jsx jsx */
import { Component } from 'react';
import { jsx } from '@emotion/core';
import { getNavItemStyles } from '../internal/styles';
import NavLine from './NavLine';

var noop = function noop() {};

var TabItem = /*#__PURE__*/function (_Component) {
  _inherits(TabItem, _Component);

  var _super = _createSuper(TabItem);

  function TabItem() {
    _classCallCheck(this, TabItem);

    return _super.apply(this, arguments);
  }

  _createClass(TabItem, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          data = _this$props.data,
          elementProps = _this$props.elementProps,
          innerRef = _this$props.innerRef,
          isSelected = _this$props.isSelected,
          mode = _this$props.mode;
      return jsx("div", _extends({
        css: getNavItemStyles(mode)
      }, elementProps, {
        ref: innerRef,
        "data-selected": isSelected ? true : undefined
      }), data.label, isSelected && jsx(NavLine, {
        status: "selected",
        mode: mode
      }));
    }
  }]);

  return TabItem;
}(Component);

_defineProperty(TabItem, "defaultProps", {
  data: {},
  elementProps: {},
  innerRef: noop,
  isSelected: false,
  mode: 'light'
});

export { TabItem as default };