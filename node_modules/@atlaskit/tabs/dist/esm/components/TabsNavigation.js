import _extends from "@babel/runtime/helpers/extends";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _assertThisInitialized from "@babel/runtime/helpers/assertThisInitialized";
import _inherits from "@babel/runtime/helpers/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _defineProperty from "@babel/runtime/helpers/defineProperty";

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

/** @jsx jsx */
import { Component } from 'react';
import { jsx } from '@emotion/core';
import GlobalTheme from '@atlaskit/theme/components';
import { navStyles, navWrapperStyles } from '../internal/styles';
import NavLine from './NavLine';

var TabsNavigation = /*#__PURE__*/function (_Component) {
  _inherits(TabsNavigation, _Component);

  var _super = _createSuper(TabsNavigation);

  function TabsNavigation() {
    var _this;

    _classCallCheck(this, TabsNavigation);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _defineProperty(_assertThisInitialized(_this), "elementRefs", []);

    _defineProperty(_assertThisInitialized(_this), "tabKeyDownHandler", function (e) {
      if (!['ArrowRight', 'ArrowLeft'].includes(e.key)) {
        return;
      }

      var _this$props = _this.props,
          selected = _this$props.selected,
          tabs = _this$props.tabs;
      var modifier = e.key === 'ArrowRight' ? 1 : -1;
      var newselectedIndex = tabs.indexOf(selected) + modifier;

      if (newselectedIndex < 0 || newselectedIndex >= tabs.length) {
        return;
      }

      _this.onSelect(tabs[newselectedIndex], newselectedIndex);

      _this.elementRefs[newselectedIndex].focus();
    });

    _defineProperty(_assertThisInitialized(_this), "onSelect", function (selected, selectedIndex) {
      _this.props.onSelect(selected, selectedIndex);
    });

    _defineProperty(_assertThisInitialized(_this), "tabMouseDownHandler", function (e) {
      return e.preventDefault();
    });

    return _this;
  }

  _createClass(TabsNavigation, [{
    key: "UNSAFE_componentWillReceiveProps",
    value: function UNSAFE_componentWillReceiveProps(newProps) {
      if (newProps.tabs !== this.props.tabs) {
        this.elementRefs = [];
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      var _this$props2 = this.props,
          selected = _this$props2.selected,
          Item = _this$props2.component,
          tabs = _this$props2.tabs;
      return jsx(GlobalTheme.Consumer, null, function (_ref) {
        var mode = _ref.mode;
        return jsx("div", {
          css: navWrapperStyles
        }, jsx(NavLine, {
          status: "normal",
          mode: mode
        }), jsx("div", {
          role: "tablist",
          css: navStyles
        }, tabs.map(function (tab, index) {
          var isSelected = tab === selected;
          var elementProps = {
            'aria-posinset': index + 1,
            'aria-selected': isSelected,
            'aria-setsize': tabs.length,
            'data-testid': tab.testId,
            onClick: function onClick() {
              return _this2.onSelect(tab, index);
            },
            onKeyDown: _this2.tabKeyDownHandler,
            onMouseDown: _this2.tabMouseDownHandler,
            role: 'tab',
            tabIndex: isSelected ? 0 : -1
          };

          var innerRef = function innerRef(ref) {
            _this2.elementRefs[index] = ref;
          };

          var itemProps = {
            elementProps: elementProps,
            innerRef: innerRef,
            data: tab,
            isSelected: isSelected,
            mode: mode
          };
          return jsx(Item, _extends({
            key: index
          }, itemProps));
        })));
      });
    }
  }]);

  return TabsNavigation;
}(Component);

export { TabsNavigation as default };