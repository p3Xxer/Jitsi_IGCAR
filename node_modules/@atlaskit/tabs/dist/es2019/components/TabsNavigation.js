import _extends from "@babel/runtime/helpers/extends";
import _defineProperty from "@babel/runtime/helpers/defineProperty";

/** @jsx jsx */
import { Component } from 'react';
import { jsx } from '@emotion/core';
import GlobalTheme from '@atlaskit/theme/components';
import { navStyles, navWrapperStyles } from '../internal/styles';
import NavLine from './NavLine';
export default class TabsNavigation extends Component {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "elementRefs", []);

    _defineProperty(this, "tabKeyDownHandler", e => {
      if (!['ArrowRight', 'ArrowLeft'].includes(e.key)) {
        return;
      }

      const {
        selected,
        tabs
      } = this.props;
      const modifier = e.key === 'ArrowRight' ? 1 : -1;
      const newselectedIndex = tabs.indexOf(selected) + modifier;

      if (newselectedIndex < 0 || newselectedIndex >= tabs.length) {
        return;
      }

      this.onSelect(tabs[newselectedIndex], newselectedIndex);
      this.elementRefs[newselectedIndex].focus();
    });

    _defineProperty(this, "onSelect", (selected, selectedIndex) => {
      this.props.onSelect(selected, selectedIndex);
    });

    _defineProperty(this, "tabMouseDownHandler", e => e.preventDefault());
  }

  UNSAFE_componentWillReceiveProps(newProps) {
    if (newProps.tabs !== this.props.tabs) {
      this.elementRefs = [];
    }
  }

  render() {
    const {
      selected,
      component: Item,
      tabs
    } = this.props;
    return jsx(GlobalTheme.Consumer, null, ({
      mode
    }) => jsx("div", {
      css: navWrapperStyles
    }, jsx(NavLine, {
      status: "normal",
      mode: mode
    }), jsx("div", {
      role: "tablist",
      css: navStyles
    }, tabs.map((tab, index) => {
      const isSelected = tab === selected;
      const elementProps = {
        'aria-posinset': index + 1,
        'aria-selected': isSelected,
        'aria-setsize': tabs.length,
        'data-testid': tab.testId,
        onClick: () => this.onSelect(tab, index),
        onKeyDown: this.tabKeyDownHandler,
        onMouseDown: this.tabMouseDownHandler,
        role: 'tab',
        tabIndex: isSelected ? 0 : -1
      };

      const innerRef = ref => {
        this.elementRefs[index] = ref;
      };

      const itemProps = {
        elementProps,
        innerRef,
        data: tab,
        isSelected,
        mode: mode
      };
      return jsx(Item, _extends({
        key: index
      }, itemProps));
    }))));
  }

}