/** @jsx jsx */
import { Component } from 'react';
import { SelectedProp, TabData, TabsProps, TabsState } from '../types';
declare class Tabs extends Component<TabsProps, TabsState> {
    static defaultProps: {
        components: {};
        isContentPersisted: boolean;
    };
    constructor(props: TabsProps);
    UNSAFE_componentWillReceiveProps(newProps: TabsProps): void;
    resolveSelected: (selected: SelectedProp, newProps?: TabsProps | undefined) => TabData;
    onSelect: (newselected: TabData, newSelectedIndex: number) => void;
    render(): JSX.Element;
}
export { Tabs as TabsWithoutAnalytics };
declare const _default: import("react").ForwardRefExoticComponent<Pick<Pick<Pick<TabsProps, "selected" | "onSelect" | "tabs" | "components" | "defaultSelected" | "isSelectedTest" | "isContentPersisted" | "testId">, "selected" | "onSelect" | "tabs" | "defaultSelected" | "isSelectedTest" | "testId"> & Partial<Pick<Pick<TabsProps, "selected" | "onSelect" | "tabs" | "components" | "defaultSelected" | "isSelectedTest" | "isContentPersisted" | "testId">, "components" | "isContentPersisted">> & Partial<Pick<{
    components: {};
    isContentPersisted: boolean;
}, never>> & import("react").RefAttributes<any> & import("@atlaskit/analytics-next").WithContextProps, "selected" | "onSelect" | "tabs" | "components" | "defaultSelected" | "isSelectedTest" | "isContentPersisted" | "testId" | "key" | "analyticsContext"> & import("react").RefAttributes<any>>;
export default _default;
