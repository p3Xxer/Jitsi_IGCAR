import _extends from "@babel/runtime/helpers/extends";

/** @jsx jsx */
import { forwardRef, memo, useMemo, useState } from 'react';
import { jsx } from '@emotion/core';
import { usePlatformLeafEventHandler } from '@atlaskit/analytics-next';
import CloseIcon from '@atlaskit/icon/glyph/editor/close';
import CheckIcon from '@atlaskit/icon/glyph/editor/done';
import GlobalTheme from '@atlaskit/theme/components';
import { getStyles } from './internal/styles';
import { name as packageName, version as packageVersion } from './version.json';
export const getIconSize = size => size === 'large' ? 'large' : 'small';

const noop = () => {};

const analyticsAttributes = {
  componentName: 'toggle',
  packageName,
  packageVersion
};
const InnerToggle = /*#__PURE__*/forwardRef((props, ref) => {
  const {
    defaultChecked = false,
    isDisabled = false,
    onBlur: providedOnBlur = noop,
    onChange: providedChange = noop,
    onFocus: providedFocus = noop,
    size = 'regular',
    name = '',
    value = '',
    isChecked,
    analyticsContext,
    id,
    testId,
    mode
  } = props;
  const isControlled = typeof isChecked === 'undefined';
  const [checked, setChecked] = useState(defaultChecked);
  const handleBlur = usePlatformLeafEventHandler({
    fn: providedOnBlur,
    action: 'blur',
    analyticsData: analyticsContext,
    ...analyticsAttributes
  });
  const handleFocus = usePlatformLeafEventHandler({
    fn: providedFocus,
    action: 'focus',
    analyticsData: analyticsContext,
    ...analyticsAttributes
  });
  const handleChange = usePlatformLeafEventHandler({
    fn: (event, analyticsEvent) => {
      if (isControlled) {
        setChecked(checked => !checked);
      }

      return providedChange(event, analyticsEvent);
    },
    action: 'change',
    analyticsData: analyticsContext,
    ...analyticsAttributes
  });
  const shouldChecked = isControlled ? checked : isChecked;
  const controlProps = {
    'data-checked': shouldChecked ? shouldChecked : undefined,
    'data-disabled': isDisabled ? isDisabled : undefined,
    'data-size': size,
    'data-testid': testId ? testId : undefined
  };
  const toggleStyles = useMemo(() => getStyles(size, mode), [size, mode]);
  return (// https://product-fabric.atlassian.net/browse/DST-1969
    // eslint-disable-next-line jsx-a11y/label-has-associated-control,jsx-a11y/label-has-for
    jsx("label", _extends({}, controlProps, {
      css: toggleStyles
    }), jsx("input", {
      ref: ref,
      checked: shouldChecked,
      disabled: isDisabled,
      id: id,
      name: name,
      onBlur: handleBlur,
      onChange: handleChange,
      onFocus: handleFocus,
      type: "checkbox",
      value: value,
      "data-testid": testId && `${testId}--input`
    }), jsx(CheckIcon, {
      label: "check",
      size: getIconSize(size)
    }), jsx(CloseIcon, {
      label: "cross",
      size: getIconSize(size)
    }))
  );
});
const Toggle = /*#__PURE__*/memo( /*#__PURE__*/forwardRef(function Toggle(props, ref) {
  return jsx(GlobalTheme.Consumer, null, tokens => {
    const mode = tokens.mode;
    return jsx(InnerToggle, _extends({}, props, {
      mode: mode,
      ref: ref
    }));
  });
}));
Toggle.displayName = 'Toggle';
export default Toggle;