"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.getIconSize = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _react = require("react");

var _core = require("@emotion/core");

var _analyticsNext = require("@atlaskit/analytics-next");

var _close = _interopRequireDefault(require("@atlaskit/icon/glyph/editor/close"));

var _done = _interopRequireDefault(require("@atlaskit/icon/glyph/editor/done"));

var _components = _interopRequireDefault(require("@atlaskit/theme/components"));

var _styles = require("./internal/styles");

var _version = require("./version.json");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var getIconSize = function getIconSize(size) {
  return size === 'large' ? 'large' : 'small';
};

exports.getIconSize = getIconSize;

var noop = function noop() {};

var analyticsAttributes = {
  componentName: 'toggle',
  packageName: _version.name,
  packageVersion: _version.version
};
var InnerToggle = /*#__PURE__*/(0, _react.forwardRef)(function (props, ref) {
  var _props$defaultChecked = props.defaultChecked,
      defaultChecked = _props$defaultChecked === void 0 ? false : _props$defaultChecked,
      _props$isDisabled = props.isDisabled,
      isDisabled = _props$isDisabled === void 0 ? false : _props$isDisabled,
      _props$onBlur = props.onBlur,
      providedOnBlur = _props$onBlur === void 0 ? noop : _props$onBlur,
      _props$onChange = props.onChange,
      providedChange = _props$onChange === void 0 ? noop : _props$onChange,
      _props$onFocus = props.onFocus,
      providedFocus = _props$onFocus === void 0 ? noop : _props$onFocus,
      _props$size = props.size,
      size = _props$size === void 0 ? 'regular' : _props$size,
      _props$name = props.name,
      name = _props$name === void 0 ? '' : _props$name,
      _props$value = props.value,
      value = _props$value === void 0 ? '' : _props$value,
      isChecked = props.isChecked,
      analyticsContext = props.analyticsContext,
      id = props.id,
      testId = props.testId,
      mode = props.mode;
  var isControlled = typeof isChecked === 'undefined';

  var _useState = (0, _react.useState)(defaultChecked),
      _useState2 = (0, _slicedToArray2.default)(_useState, 2),
      checked = _useState2[0],
      setChecked = _useState2[1];

  var handleBlur = (0, _analyticsNext.usePlatformLeafEventHandler)(_objectSpread({
    fn: providedOnBlur,
    action: 'blur',
    analyticsData: analyticsContext
  }, analyticsAttributes));
  var handleFocus = (0, _analyticsNext.usePlatformLeafEventHandler)(_objectSpread({
    fn: providedFocus,
    action: 'focus',
    analyticsData: analyticsContext
  }, analyticsAttributes));
  var handleChange = (0, _analyticsNext.usePlatformLeafEventHandler)(_objectSpread({
    fn: function fn(event, analyticsEvent) {
      if (isControlled) {
        setChecked(function (checked) {
          return !checked;
        });
      }

      return providedChange(event, analyticsEvent);
    },
    action: 'change',
    analyticsData: analyticsContext
  }, analyticsAttributes));
  var shouldChecked = isControlled ? checked : isChecked;
  var controlProps = {
    'data-checked': shouldChecked ? shouldChecked : undefined,
    'data-disabled': isDisabled ? isDisabled : undefined,
    'data-size': size,
    'data-testid': testId ? testId : undefined
  };
  var toggleStyles = (0, _react.useMemo)(function () {
    return (0, _styles.getStyles)(size, mode);
  }, [size, mode]);
  return (// https://product-fabric.atlassian.net/browse/DST-1969
    // eslint-disable-next-line jsx-a11y/label-has-associated-control,jsx-a11y/label-has-for
    (0, _core.jsx)("label", (0, _extends2.default)({}, controlProps, {
      css: toggleStyles
    }), (0, _core.jsx)("input", {
      ref: ref,
      checked: shouldChecked,
      disabled: isDisabled,
      id: id,
      name: name,
      onBlur: handleBlur,
      onChange: handleChange,
      onFocus: handleFocus,
      type: "checkbox",
      value: value,
      "data-testid": testId && "".concat(testId, "--input")
    }), (0, _core.jsx)(_done.default, {
      label: "check",
      size: getIconSize(size)
    }), (0, _core.jsx)(_close.default, {
      label: "cross",
      size: getIconSize(size)
    }))
  );
});
var Toggle = /*#__PURE__*/(0, _react.memo)( /*#__PURE__*/(0, _react.forwardRef)(function Toggle(props, ref) {
  return (0, _core.jsx)(_components.default.Consumer, null, function (tokens) {
    var mode = tokens.mode;
    return (0, _core.jsx)(InnerToggle, (0, _extends2.default)({}, props, {
      mode: mode,
      ref: ref
    }));
  });
}));
Toggle.displayName = 'Toggle';
var _default = Toggle;
exports.default = _default;