"use strict";

var _typeof = require("@babel/runtime/helpers/typeof");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getInputBackground = getInputBackground;
exports.getInputFill = getInputFill;

var colors = _interopRequireWildcard(require("@atlaskit/theme/colors"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function getInputBackground(_ref) {
  var isChecked = _ref.isChecked,
      isDisabled = _ref.isDisabled,
      isHovered = _ref.isHovered,
      isPressed = _ref.isPressed;
  var background = colors.N40;
  if (isHovered) background = colors.N50;
  if (isPressed) background = colors.B200;
  if (isChecked) background = colors.B400;
  if (isDisabled) background = colors.N20;
  if (isChecked && isDisabled) background = colors.N600;
  return background;
}

function getInputFill(appearanceProps) {
  return appearanceProps.isChecked ? colors.N0 : 'transparent';
}