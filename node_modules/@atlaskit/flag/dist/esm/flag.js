import _extends from "@babel/runtime/helpers/extends";
import _taggedTemplateLiteral from "@babel/runtime/helpers/taggedTemplateLiteral";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _slicedToArray from "@babel/runtime/helpers/slicedToArray";

function _templateObject5() {
  var data = _taggedTemplateLiteral(["\n                    color: ", ";\n                    word-wrap: break-word;\n                    overflow: auto;\n                    max-height: 100px; /* height is defined as 5 lines maximum by design */\n                  "]);

  _templateObject5 = function _templateObject5() {
    return data;
  };

  return data;
}

function _templateObject4() {
  var data = _taggedTemplateLiteral(["\n                  color: ", ";\n                  font-weight: 600;\n                  flex: 1;\n                  overflow: hidden;\n                  text-overflow: ellipsis;\n                  white-space: nowrap;\n                  padding: 0 0 0 ", "px;\n                "]);

  _templateObject4 = function _templateObject4() {
    return data;
  };

  return data;
}

function _templateObject3() {
  var data = _taggedTemplateLiteral(["\n                display: flex;\n                align-items: center;\n                height: ", "px;\n              "]);

  _templateObject3 = function _templateObject3() {
    return data;
  };

  return data;
}

function _templateObject2() {
  var data = _taggedTemplateLiteral(["\n              background-color: ", ";\n              border-radius: ", "px;\n              box-sizing: border-box;\n              box-shadow: ", ";\n              color: ", ";\n              padding: ", "px;\n              transition: background-color 200ms;\n              width: 100%;\n              z-index: ", ";\n\n              &:focus {\n                outline: none;\n                box-shadow: 0 0 0 2px ", ";\n              }\n            "]);

  _templateObject2 = function _templateObject2() {
    return data;
  };

  return data;
}

function _templateObject() {
  var data = _taggedTemplateLiteral(["\n            appearance: none;\n            background: none;\n            border: none;\n            border-radius: ", "px;\n            color: ", ";\n            cursor: pointer;\n            flex: 0 0 auto;\n            line-height: 1;\n            margin-left: ", "px;\n            padding: 0;\n            white-space: nowrap;\n            &:focus {\n              outline: none;\n              box-shadow: 0 0 0 2px ", ";\n            }\n          "]);

  _templateObject = function _templateObject() {
    return data;
  };

  return data;
}

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

/** @jsx jsx */
import { useCallback, useEffect, useState } from 'react';
import { css, jsx } from '@emotion/core';
import ChevronDownIcon from '@atlaskit/icon/glyph/chevron-down';
import ChevronUpIcon from '@atlaskit/icon/glyph/chevron-up';
import CrossIcon from '@atlaskit/icon/glyph/cross';
import GlobalTheme from '@atlaskit/theme/components';
import { borderRadius, gridSize as getGridSize, layers } from '@atlaskit/theme/constants';
import { usePlatformLeafEventHandler } from '@atlaskit/analytics-next';
import { DEFAULT_APPEARANCE } from './constants';
import { flagBorderColor, flagShadowColor, getFlagBackgroundColor, getFlagFocusRingColor, getFlagTextColor } from './theme';
import { name as packageName, version as packageVersion } from './version.json';
import Expander from './expander';
import Actions from './flag-actions';
import { useFlagGroup } from './flag-group';

function noop() {}

var analyticsAttributes = {
  componentName: 'flag',
  packageName: packageName,
  packageVersion: packageVersion
};
var gridSize = getGridSize();
var doubleGridSize = gridSize * 2;
var headerHeight = gridSize * 4;

var Flag = function Flag(props) {
  var _props$actions = props.actions,
      actions = _props$actions === void 0 ? [] : _props$actions,
      _props$appearance = props.appearance,
      appearance = _props$appearance === void 0 ? DEFAULT_APPEARANCE : _props$appearance,
      icon = props.icon,
      title = props.title,
      description = props.description,
      linkComponent = props.linkComponent,
      onMouseOver = props.onMouseOver,
      _props$onFocus = props.onFocus,
      onFocus = _props$onFocus === void 0 ? noop : _props$onFocus,
      onMouseOut = props.onMouseOut,
      _props$onBlur = props.onBlur,
      onBlur = _props$onBlur === void 0 ? noop : _props$onBlur,
      testId = props.testId,
      id = props.id,
      analyticsContext = props.analyticsContext;

  var _useFlagGroup = useFlagGroup(),
      _useFlagGroup$onDismi = _useFlagGroup.onDismissed,
      onDismissed = _useFlagGroup$onDismi === void 0 ? noop : _useFlagGroup$onDismi,
      dismissAllowed = _useFlagGroup.dismissAllowed;

  var isDismissAllowed = dismissAllowed(id);

  var _useState = useState(false),
      _useState2 = _slicedToArray(_useState, 2),
      isExpanded = _useState2[0],
      setIsExpanded = _useState2[1];

  var onDismissedAnalytics = usePlatformLeafEventHandler(_objectSpread({
    fn: onDismissed,
    action: 'dismissed',
    analyticsData: analyticsContext
  }, analyticsAttributes));
  var isBold = appearance !== DEFAULT_APPEARANCE;
  var renderToggleOrDismissButton = useCallback(function (_ref) {
    var mode = _ref.mode;

    // If it is normal appearance a toggle button cannot be rendered
    // Ensure onDismissed is defined and isDismissAllowed is true to render
    // the dismiss button
    if (!isBold && !isDismissAllowed) {
      return null;
    } // If it is bold then ensure there is a description or actions to render
    // the toggle button


    if (isBold && !description && !actions.length) {
      return null;
    }

    var ButtonIcon = CrossIcon;
    var buttonLabel = 'Dismiss flag';

    var buttonAction = function buttonAction() {
      if (isDismissAllowed) {
        onDismissedAnalytics(id);
      }
    };

    var size = 'small';
    var buttonTestId = testId && "".concat(testId, "-dismiss");

    if (isBold) {
      ButtonIcon = isExpanded ? ChevronUpIcon : ChevronDownIcon;
      buttonLabel = 'Toggle flag body';

      buttonAction = function buttonAction() {
        return setIsExpanded(!isExpanded);
      };

      size = 'large';
      buttonTestId = testId && "".concat(testId, "-toggle");
    }

    return jsx("button", {
      css: css(_templateObject(), borderRadius(), getFlagTextColor(appearance, mode), gridSize, getFlagFocusRingColor(appearance, mode)),
      "aria-expanded": isExpanded,
      onClick: buttonAction,
      "data-testid": buttonTestId,
      type: "button"
    }, jsx(ButtonIcon, {
      label: buttonLabel,
      size: size
    }));
  }, [actions.length, appearance, description, id, isBold, isDismissAllowed, isExpanded, onDismissedAnalytics, testId]); // We prevent default on mouse down to avoid focus ring when the flag is clicked,
  // while still allowing it to be focused with the keyboard.

  var handleMouseDown = useCallback(function (e) {
    e.preventDefault();
  }, []);
  useEffect(function () {
    // If buttons are removed as a prop, update isExpanded to be false
    if (isBold && isExpanded && !description && !actions.length) {
      setIsExpanded(false);
    }
  }, [actions.length, description, isBold, isExpanded]);
  var onFocusAnalytics = usePlatformLeafEventHandler(_objectSpread({
    fn: onFocus,
    action: 'focused',
    analyticsData: analyticsContext
  }, analyticsAttributes));
  var onBlurAnalytics = usePlatformLeafEventHandler(_objectSpread({
    fn: onBlur,
    action: 'blurred',
    analyticsData: analyticsContext
  }, analyticsAttributes));
  var autoDismissProps = {
    onMouseOver: onMouseOver,
    onFocus: onFocusAnalytics,
    onMouseOut: onMouseOut,
    onBlur: onBlurAnalytics
  };
  var OptionalDismissButton = renderToggleOrDismissButton;
  var boxShadow = "0 20px 32px -8px ".concat(flagShadowColor);

  if (!isBold) {
    boxShadow = "0 0 1px ".concat(flagBorderColor, ", ").concat(boxShadow);
  }

  return jsx(GlobalTheme.Consumer, null, function (tokens) {
    var mode = tokens.mode;
    var textColour = getFlagTextColor(appearance, mode);
    return jsx("div", _extends({
      css: css(_templateObject2(), getFlagBackgroundColor(appearance, mode), borderRadius(), boxShadow, textColour, doubleGridSize, layers.flag(), getFlagFocusRingColor(appearance, mode)),
      role: "alert",
      tabIndex: 0,
      onMouseDown: handleMouseDown,
      "data-testid": testId
    }, autoDismissProps), jsx("div", {
      css: css(_templateObject3(), headerHeight)
    }, icon, jsx("span", {
      css: css(_templateObject4(), textColour, doubleGridSize)
    }, title), jsx(OptionalDismissButton, {
      mode: mode
    })), jsx(Expander, {
      isExpanded: !isBold || isExpanded,
      testId: testId
    }, description && jsx("div", {
      css: css(_templateObject5(), textColour),
      "data-testid": testId && "".concat(testId, "-description")
    }, description), jsx(Actions, {
      actions: actions,
      appearance: appearance,
      linkComponent: linkComponent,
      testId: testId,
      mode: mode
    })));
  });
};

export default Flag;