import _taggedTemplateLiteral from "@babel/runtime/helpers/taggedTemplateLiteral";

function _templateObject3() {
  var data = _taggedTemplateLiteral(["\n            &&,\n            a&& {\n              margin-left: ", "px;\n              font-weight: 500;\n              padding: 0 ", "px !important;\n              background: ", ";\n              color: ", " !important;\n            }\n            &&:focus,\n            a&&:focus {\n              box-shadow: 0 0 0 2px ", ";\n            }\n            &&:hover,\n            &&:active,\n            a&&:hover,\n            a&&:active {\n              text-decoration: underline;\n            }\n          "]);

  _templateObject3 = function _templateObject3() {
    return data;
  };

  return data;
}

function _templateObject2() {
  var data = _taggedTemplateLiteral(["\n              text-align: center;\n              display: inline-block;\n              width: ", "px;\n            "]);

  _templateObject2 = function _templateObject2() {
    return data;
  };

  return data;
}

function _templateObject() {
  var data = _taggedTemplateLiteral(["\n        display: flex;\n        flex-wrap: wrap;\n        padding-top: ", "px;\n        transform: ", ";\n        align-items: center;\n      "]);

  _templateObject = function _templateObject() {
    return data;
  };

  return data;
}

/** @jsx jsx */
import { css, jsx } from '@emotion/core';
import Button from '@atlaskit/button/custom-theme-button';
import { gridSize as getGridSize } from '@atlaskit/theme/constants';
import { DEFAULT_APPEARANCE } from './constants';
import { getActionBackground, getActionColor, getFlagFocusRingColor } from './theme';
var gridSize = getGridSize();
var separatorWidth = gridSize * 2;
var defaultAppearanceTranslate = gridSize / 4;

var FlagActions = function FlagActions(props) {
  var _props$appearance = props.appearance,
      appearance = _props$appearance === void 0 ? DEFAULT_APPEARANCE : _props$appearance,
      _props$actions = props.actions,
      actions = _props$actions === void 0 ? [] : _props$actions,
      linkComponent = props.linkComponent,
      mode = props.mode,
      testId = props.testId;

  if (!actions.length) {
    return null;
  }

  var isBold = appearance !== DEFAULT_APPEARANCE;
  return jsx("div", {
    css: css(_templateObject(), gridSize, appearance === DEFAULT_APPEARANCE ? "translateX(-".concat(defaultAppearanceTranslate, "px)") : 0),
    "data-testid": testId && "".concat(testId, "-actions")
  }, actions.map(function (action, index) {
    return [index && !isBold ? jsx("div", {
      css: css(_templateObject2(), separatorWidth),
      key: index + 0.5
    }, "\xB7") : '', jsx(Button, {
      onClick: action.onClick,
      href: action.href,
      target: action.target,
      appearance: isBold ? 'default' : 'link',
      component: linkComponent,
      spacing: "compact",
      testId: action.testId,
      key: index,
      css: css(_templateObject3(), index && isBold ? gridSize : 0, appearance === 'normal' ? 0 : gridSize, getActionBackground(appearance, mode), getActionColor(appearance, mode), getFlagFocusRingColor(appearance, mode))
    }, action.content)];
  }));
};

export default FlagActions;