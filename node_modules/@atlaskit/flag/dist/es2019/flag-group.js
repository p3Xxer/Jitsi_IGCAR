import _extends from "@babel/runtime/helpers/extends";

/** @jsx jsx */
import { Children, createContext, useContext } from 'react';
import { css, jsx } from '@emotion/core';
import { easeIn, ExitingPersistence, SlideIn } from '@atlaskit/motion';
import Portal from '@atlaskit/portal';
import { gridSize as getGridSize, layers } from '@atlaskit/theme/constants';
const gridSize = getGridSize();
export const flagWidth = gridSize * 50;
export const flagAnimationTime = 400;
const flagBottom = gridSize * 6;
const flagLeft = gridSize * 10;
export const FlagGroupContext = /*#__PURE__*/createContext({
  dismissAllowed: () => false
});
export function useFlagGroup() {
  return useContext(FlagGroupContext);
} // transition: none is set on first-of-type to prevent a bug in Firefox
// that causes a broken transition

const baseStyles = `
  bottom: 0;
  position: absolute;
  width: ${flagWidth}px;
  transition: transform ${flagAnimationTime}ms ease-in-out;

  @media (max-width: 560px) {
    width: 100vw;
  }

  &:first-of-type {
    transition: none;
    transform: translate(0,0);
  }

  &:nth-of-type(n + 2) {
    animation-duration: 0ms;
    transform: translateX(0) translateY(100%) translateY(${2 * gridSize}px);
  }

  /* Layer the 'primary' flag above the 'secondary' flag */
  &:nth-of-type(1) {
    z-index: 5;
  }
  &:nth-of-type(2) {
    z-index: 4;
  }

  &:nth-of-type(n + 4) {
    visibility: hidden;
  }
`;

const FlagGroup = props => {
  const {
    id,
    label = 'Flag notifications',
    labelTag: LabelTag = 'h2',
    children,
    onDismissed
  } = props;

  const renderChildren = () => {
    return children ? Children.map(children, (flag, index) => {
      const isDismissAllowed = index === 0;
      const {
        id
      } = flag.props;
      return jsx(SlideIn, {
        key: id,
        enterFrom: 'left',
        fade: 'inout',
        duration: flagAnimationTime,
        animationTimingFunction: () => easeIn
      }, props => jsx("div", _extends({}, props, {
        css: css`
                    ${baseStyles}
                    ${isDismissAllowed ? // Transform needed to push up while 1st flag is leaving
        // Exiting time should match the exiting time of motion so is halved
        `
                    && + * {
                     transform: translate(0, 0);
                     transition-duration: ${flagAnimationTime / 2}ms
                   }` : ''}
                  `
      }), flag));
    }) : false;
  };

  const hasFlags = Array.isArray(children) ? children.length > 0 : Boolean(children);
  let firstFlagId = null;

  if (hasFlags && children) {
    firstFlagId = Array.isArray(children) ? children[0].props.id : children.props.id;
  }

  const api = {
    onDismissed: onDismissed,
    dismissAllowed: id => id === firstFlagId
  };
  return jsx(FlagGroupContext.Provider, {
    value: api
  }, jsx(Portal, {
    zIndex: layers.flag()
  }, jsx("div", {
    id: id,
    css: css`
            bottom: ${flagBottom}px;
            left: ${flagLeft}px;
            position: fixed;
            z-index: ${layers.flag()};
            @media (max-width: 560px) {
              bottom: 0;
              left: 0;
            }
          `
  }, hasFlags ? jsx(LabelTag, {
    css: css`
                border: 0;
                clip: rect(1px, 1px, 1px, 1px);
                height: 1px;
                overflow: hidden;
                padding: 0;
                position: absolute;
                white-space: nowrap;
                width: 1px;
              `
  }, label) : null, jsx(ExitingPersistence, {
    appear: false
  }, renderChildren()))));
};

export default FlagGroup;