"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useFlags = useFlags;
exports.FlagsProvider = FlagsProvider;
exports.withFlagsProvider = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _react = _interopRequireWildcard(require("react"));

var _autoDismissFlag = _interopRequireDefault(require("./auto-dismiss-flag"));

var _flag = _interopRequireDefault(require("./flag"));

var _flagGroup = _interopRequireDefault(require("./flag-group"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var FlagContext = /*#__PURE__*/_react.default.createContext(null);

function useFlags() {
  var api = (0, _react.useContext)(FlagContext);

  if (api == null) {
    throw new Error('Unable to find FlagProviderContext');
  }

  return api;
}

var getUniqueId = function () {
  var count = 0;
  return function () {
    return "flag-provider-unique-id:".concat(count++);
  };
}();

function FlagsProvider(_ref) {
  var children = _ref.children;

  var _useState = (0, _react.useState)([]),
      _useState2 = (0, _slicedToArray2.default)(_useState, 2),
      flags = _useState2[0],
      setFlags = _useState2[1];

  var removeFlag = (0, _react.useCallback)(function (id) {
    setFlags(function (current) {
      return current.slice(0).filter(function (flag) {
        return flag.id !== id;
      });
    });
  }, []);
  var api = (0, _react.useMemo)(function () {
    return {
      showFlag: function show(value) {
        var flag = _objectSpread(_objectSpread({}, value), {}, {
          id: value.id || getUniqueId()
        });

        setFlags(function (current) {
          var index = current.findIndex(function (value) {
            return value.id === flag.id;
          }); // If flag is not found add it

          if (index === -1) {
            return [flag].concat((0, _toConsumableArray2.default)(current));
          } // If flag already exists with the same id, then replace it


          var shallow = (0, _toConsumableArray2.default)(current);
          shallow[index] = flag;
          return shallow;
        });
        return function dismiss() {
          removeFlag(flag.id);
        };
      }
    };
  }, [removeFlag]);
  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(FlagContext.Provider, {
    value: api
  }, children), /*#__PURE__*/_react.default.createElement(_flagGroup.default, {
    onDismissed: removeFlag
  }, flags.map(function (flag) {
    var isAutoDismiss = flag.isAutoDismiss,
        restProps = (0, _objectWithoutProperties2.default)(flag, ["isAutoDismiss"]);
    var FlagType = isAutoDismiss ? _autoDismissFlag.default : _flag.default;
    return /*#__PURE__*/_react.default.createElement(FlagType, (0, _extends2.default)({}, restProps, {
      key: flag.id
    }));
  })));
}

var withFlagsProvider = function withFlagsProvider(fn) {
  return /*#__PURE__*/_react.default.createElement(FlagsProvider, null, fn());
};

exports.withFlagsProvider = withFlagsProvider;