"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _taggedTemplateLiteral2 = _interopRequireDefault(require("@babel/runtime/helpers/taggedTemplateLiteral"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _react = require("react");

var _core = require("@emotion/core");

var _chevronDown = _interopRequireDefault(require("@atlaskit/icon/glyph/chevron-down"));

var _chevronUp = _interopRequireDefault(require("@atlaskit/icon/glyph/chevron-up"));

var _cross = _interopRequireDefault(require("@atlaskit/icon/glyph/cross"));

var _components = _interopRequireDefault(require("@atlaskit/theme/components"));

var _constants = require("@atlaskit/theme/constants");

var _analyticsNext = require("@atlaskit/analytics-next");

var _constants2 = require("./constants");

var _theme = require("./theme");

var _version = require("./version.json");

var _expander = _interopRequireDefault(require("./expander"));

var _flagActions = _interopRequireDefault(require("./flag-actions"));

var _flagGroup = require("./flag-group");

function _templateObject5() {
  var data = (0, _taggedTemplateLiteral2.default)(["\n                    color: ", ";\n                    word-wrap: break-word;\n                    overflow: auto;\n                    max-height: 100px; /* height is defined as 5 lines maximum by design */\n                  "]);

  _templateObject5 = function _templateObject5() {
    return data;
  };

  return data;
}

function _templateObject4() {
  var data = (0, _taggedTemplateLiteral2.default)(["\n                  color: ", ";\n                  font-weight: 600;\n                  flex: 1;\n                  overflow: hidden;\n                  text-overflow: ellipsis;\n                  white-space: nowrap;\n                  padding: 0 0 0 ", "px;\n                "]);

  _templateObject4 = function _templateObject4() {
    return data;
  };

  return data;
}

function _templateObject3() {
  var data = (0, _taggedTemplateLiteral2.default)(["\n                display: flex;\n                align-items: center;\n                height: ", "px;\n              "]);

  _templateObject3 = function _templateObject3() {
    return data;
  };

  return data;
}

function _templateObject2() {
  var data = (0, _taggedTemplateLiteral2.default)(["\n              background-color: ", ";\n              border-radius: ", "px;\n              box-sizing: border-box;\n              box-shadow: ", ";\n              color: ", ";\n              padding: ", "px;\n              transition: background-color 200ms;\n              width: 100%;\n              z-index: ", ";\n\n              &:focus {\n                outline: none;\n                box-shadow: 0 0 0 2px ", ";\n              }\n            "]);

  _templateObject2 = function _templateObject2() {
    return data;
  };

  return data;
}

function _templateObject() {
  var data = (0, _taggedTemplateLiteral2.default)(["\n            appearance: none;\n            background: none;\n            border: none;\n            border-radius: ", "px;\n            color: ", ";\n            cursor: pointer;\n            flex: 0 0 auto;\n            line-height: 1;\n            margin-left: ", "px;\n            padding: 0;\n            white-space: nowrap;\n            &:focus {\n              outline: none;\n              box-shadow: 0 0 0 2px ", ";\n            }\n          "]);

  _templateObject = function _templateObject() {
    return data;
  };

  return data;
}

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function noop() {}

var analyticsAttributes = {
  componentName: 'flag',
  packageName: _version.name,
  packageVersion: _version.version
};
var gridSize = (0, _constants.gridSize)();
var doubleGridSize = gridSize * 2;
var headerHeight = gridSize * 4;

var Flag = function Flag(props) {
  var _props$actions = props.actions,
      actions = _props$actions === void 0 ? [] : _props$actions,
      _props$appearance = props.appearance,
      appearance = _props$appearance === void 0 ? _constants2.DEFAULT_APPEARANCE : _props$appearance,
      icon = props.icon,
      title = props.title,
      description = props.description,
      linkComponent = props.linkComponent,
      onMouseOver = props.onMouseOver,
      _props$onFocus = props.onFocus,
      onFocus = _props$onFocus === void 0 ? noop : _props$onFocus,
      onMouseOut = props.onMouseOut,
      _props$onBlur = props.onBlur,
      onBlur = _props$onBlur === void 0 ? noop : _props$onBlur,
      testId = props.testId,
      id = props.id,
      analyticsContext = props.analyticsContext;

  var _useFlagGroup = (0, _flagGroup.useFlagGroup)(),
      _useFlagGroup$onDismi = _useFlagGroup.onDismissed,
      onDismissed = _useFlagGroup$onDismi === void 0 ? noop : _useFlagGroup$onDismi,
      dismissAllowed = _useFlagGroup.dismissAllowed;

  var isDismissAllowed = dismissAllowed(id);

  var _useState = (0, _react.useState)(false),
      _useState2 = (0, _slicedToArray2.default)(_useState, 2),
      isExpanded = _useState2[0],
      setIsExpanded = _useState2[1];

  var onDismissedAnalytics = (0, _analyticsNext.usePlatformLeafEventHandler)(_objectSpread({
    fn: onDismissed,
    action: 'dismissed',
    analyticsData: analyticsContext
  }, analyticsAttributes));
  var isBold = appearance !== _constants2.DEFAULT_APPEARANCE;
  var renderToggleOrDismissButton = (0, _react.useCallback)(function (_ref) {
    var mode = _ref.mode;

    // If it is normal appearance a toggle button cannot be rendered
    // Ensure onDismissed is defined and isDismissAllowed is true to render
    // the dismiss button
    if (!isBold && !isDismissAllowed) {
      return null;
    } // If it is bold then ensure there is a description or actions to render
    // the toggle button


    if (isBold && !description && !actions.length) {
      return null;
    }

    var ButtonIcon = _cross.default;
    var buttonLabel = 'Dismiss flag';

    var buttonAction = function buttonAction() {
      if (isDismissAllowed) {
        onDismissedAnalytics(id);
      }
    };

    var size = 'small';
    var buttonTestId = testId && "".concat(testId, "-dismiss");

    if (isBold) {
      ButtonIcon = isExpanded ? _chevronUp.default : _chevronDown.default;
      buttonLabel = 'Toggle flag body';

      buttonAction = function buttonAction() {
        return setIsExpanded(!isExpanded);
      };

      size = 'large';
      buttonTestId = testId && "".concat(testId, "-toggle");
    }

    return (0, _core.jsx)("button", {
      css: (0, _core.css)(_templateObject(), (0, _constants.borderRadius)(), (0, _theme.getFlagTextColor)(appearance, mode), gridSize, (0, _theme.getFlagFocusRingColor)(appearance, mode)),
      "aria-expanded": isExpanded,
      onClick: buttonAction,
      "data-testid": buttonTestId,
      type: "button"
    }, (0, _core.jsx)(ButtonIcon, {
      label: buttonLabel,
      size: size
    }));
  }, [actions.length, appearance, description, id, isBold, isDismissAllowed, isExpanded, onDismissedAnalytics, testId]); // We prevent default on mouse down to avoid focus ring when the flag is clicked,
  // while still allowing it to be focused with the keyboard.

  var handleMouseDown = (0, _react.useCallback)(function (e) {
    e.preventDefault();
  }, []);
  (0, _react.useEffect)(function () {
    // If buttons are removed as a prop, update isExpanded to be false
    if (isBold && isExpanded && !description && !actions.length) {
      setIsExpanded(false);
    }
  }, [actions.length, description, isBold, isExpanded]);
  var onFocusAnalytics = (0, _analyticsNext.usePlatformLeafEventHandler)(_objectSpread({
    fn: onFocus,
    action: 'focused',
    analyticsData: analyticsContext
  }, analyticsAttributes));
  var onBlurAnalytics = (0, _analyticsNext.usePlatformLeafEventHandler)(_objectSpread({
    fn: onBlur,
    action: 'blurred',
    analyticsData: analyticsContext
  }, analyticsAttributes));
  var autoDismissProps = {
    onMouseOver: onMouseOver,
    onFocus: onFocusAnalytics,
    onMouseOut: onMouseOut,
    onBlur: onBlurAnalytics
  };
  var OptionalDismissButton = renderToggleOrDismissButton;
  var boxShadow = "0 20px 32px -8px ".concat(_theme.flagShadowColor);

  if (!isBold) {
    boxShadow = "0 0 1px ".concat(_theme.flagBorderColor, ", ").concat(boxShadow);
  }

  return (0, _core.jsx)(_components.default.Consumer, null, function (tokens) {
    var mode = tokens.mode;
    var textColour = (0, _theme.getFlagTextColor)(appearance, mode);
    return (0, _core.jsx)("div", (0, _extends2.default)({
      css: (0, _core.css)(_templateObject2(), (0, _theme.getFlagBackgroundColor)(appearance, mode), (0, _constants.borderRadius)(), boxShadow, textColour, doubleGridSize, _constants.layers.flag(), (0, _theme.getFlagFocusRingColor)(appearance, mode)),
      role: "alert",
      tabIndex: 0,
      onMouseDown: handleMouseDown,
      "data-testid": testId
    }, autoDismissProps), (0, _core.jsx)("div", {
      css: (0, _core.css)(_templateObject3(), headerHeight)
    }, icon, (0, _core.jsx)("span", {
      css: (0, _core.css)(_templateObject4(), textColour, doubleGridSize)
    }, title), (0, _core.jsx)(OptionalDismissButton, {
      mode: mode
    })), (0, _core.jsx)(_expander.default, {
      isExpanded: !isBold || isExpanded,
      testId: testId
    }, description && (0, _core.jsx)("div", {
      css: (0, _core.css)(_templateObject5(), textColour),
      "data-testid": testId && "".concat(testId, "-description")
    }, description), (0, _core.jsx)(_flagActions.default, {
      actions: actions,
      appearance: appearance,
      linkComponent: linkComponent,
      testId: testId,
      mode: mode
    })));
  });
};

var _default = Flag;
exports.default = _default;