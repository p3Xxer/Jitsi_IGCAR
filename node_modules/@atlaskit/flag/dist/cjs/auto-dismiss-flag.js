"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.AUTO_DISMISS_SECONDS = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _react = _interopRequireWildcard(require("react"));

var _analyticsNext = require("@atlaskit/analytics-next");

var _flag = _interopRequireDefault(require("./flag"));

var _flagGroup = require("./flag-group");

var _version = require("./version.json");

var AUTO_DISMISS_SECONDS = 8;
exports.AUTO_DISMISS_SECONDS = AUTO_DISMISS_SECONDS;

function noop() {}

var AutoDismissFlag = function AutoDismissFlag(props) {
  var id = props.id,
      analyticsContext = props.analyticsContext;
  var autoDismissTimer = (0, _react.useRef)(null);

  var _useFlagGroup = (0, _flagGroup.useFlagGroup)(),
      _useFlagGroup$onDismi = _useFlagGroup.onDismissed,
      onDismissed = _useFlagGroup$onDismi === void 0 ? noop : _useFlagGroup$onDismi,
      dismissAllowed = _useFlagGroup.dismissAllowed;

  var isDismissAllowed = dismissAllowed(id);
  var isAutoDismissAllowed = isDismissAllowed && onDismissed;
  var onDismissedAnalytics = (0, _analyticsNext.usePlatformLeafEventHandler)({
    fn: onDismissed,
    action: 'dismissed',
    analyticsData: analyticsContext,
    componentName: 'flag',
    packageName: _version.name,
    packageVersion: _version.version
  });
  var dismissFlag = (0, _react.useCallback)(function () {
    //@ts-expect-error TODO Fix legit TypeScript 3.9.6 improved inference error
    if (isAutoDismissAllowed) {
      onDismissedAnalytics(id);
    }
  }, [id, isAutoDismissAllowed, onDismissedAnalytics]);
  var stopAutoDismissTimer = (0, _react.useCallback)(function () {
    if (autoDismissTimer.current) {
      clearTimeout(autoDismissTimer.current);
      autoDismissTimer.current = null;
    }
  }, []);
  var startAutoDismissTimer = (0, _react.useCallback)(function () {
    if (!isAutoDismissAllowed) {
      return;
    }

    stopAutoDismissTimer();
    autoDismissTimer.current = window.setTimeout(dismissFlag, AUTO_DISMISS_SECONDS * 1000);
  }, [dismissFlag, isAutoDismissAllowed, stopAutoDismissTimer]);
  (0, _react.useEffect)(function () {
    startAutoDismissTimer();
    return stopAutoDismissTimer;
  }, [startAutoDismissTimer, stopAutoDismissTimer]);
  return /*#__PURE__*/_react.default.createElement(_flag.default, (0, _extends2.default)({}, props, {
    onMouseOver: stopAutoDismissTimer,
    onFocus: stopAutoDismissTimer,
    onMouseOut: startAutoDismissTimer,
    onBlur: startAutoDismissTimer
  }));
};

var _default = AutoDismissFlag;
exports.default = _default;