"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Popper = Popper;

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _react = _interopRequireWildcard(require("react"));

var _reactPopper = require("react-popper");

var constantModifiers = [{
  name: 'flip',
  options: {
    flipVariations: false,
    padding: 5,
    boundary: 'clippingParents',
    rootBoundary: 'viewport'
  }
}, {
  name: 'preventOverflow',
  options: {
    padding: 5,
    rootBoundary: 'document'
  }
}];

function defaultChildrenFn() {
  return null;
}

var defaultOffset = [0, 8];

function Popper(_ref) {
  var _ref$children = _ref.children,
      children = _ref$children === void 0 ? defaultChildrenFn : _ref$children,
      _ref$offset = _ref.offset,
      offset = _ref$offset === void 0 ? defaultOffset : _ref$offset,
      _ref$placement = _ref.placement,
      placement = _ref$placement === void 0 ? 'bottom-start' : _ref$placement,
      _ref$referenceElement = _ref.referenceElement,
      referenceElement = _ref$referenceElement === void 0 ? undefined : _ref$referenceElement,
      modifiers = _ref.modifiers,
      _ref$strategy = _ref.strategy,
      strategy = _ref$strategy === void 0 ? 'fixed' : _ref$strategy;

  var _offset = (0, _slicedToArray2.default)(offset, 2),
      offsetX = _offset[0],
      offsetY = _offset[1];

  // Merge a new offset modifier only if new offset values passed in
  var internalModifiers = (0, _react.useMemo)(function () {
    var offsetModifier = {
      name: 'offset',
      options: {
        offset: [offsetX, offsetY]
      }
    };
    return [].concat(constantModifiers, [offsetModifier]);
  }, [offsetX, offsetY]); // Merge custom props and memoize

  var mergedModifiers = (0, _react.useMemo)(function () {
    if (modifiers == null) {
      return internalModifiers;
    }

    return [].concat((0, _toConsumableArray2.default)(internalModifiers), (0, _toConsumableArray2.default)(modifiers));
  }, [internalModifiers, modifiers]);
  return /*#__PURE__*/_react.default.createElement(_reactPopper.Popper, {
    modifiers: mergedModifiers,
    placement: placement,
    strategy: strategy,
    referenceElement: referenceElement
  }, children);
}