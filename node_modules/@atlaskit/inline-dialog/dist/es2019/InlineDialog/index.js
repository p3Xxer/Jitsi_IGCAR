import _defineProperty from "@babel/runtime/helpers/defineProperty";
import React, { Component } from 'react';
import NodeResolver from 'react-node-resolver';
import { createAndFireEvent, withAnalyticsContext, withAnalyticsEvents } from '@atlaskit/analytics-next';
import { Manager, Popper, Reference } from '@atlaskit/popper';
import { name as packageName, version as packageVersion } from '../version.json';
import { Container } from './styled';

class InlineDialog extends Component {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "handleClickOutside", event => {
      const {
        isOpen,
        onClose
      } = this.props;

      if (event.defaultPrevented) {
        return;
      }

      const container = this.containerRef;
      const trigger = this.triggerRef;
      const {
        target
      } = event; // exit if we click outside but on the trigger â€” it can handle the clicks itself

      if (trigger && trigger.contains(target)) {
        return;
      } // call onClose if the click originated from outside the dialog


      if (isOpen && container && !container.contains(target)) {
        onClose && onClose({
          isOpen: false,
          event
        });
      }
    });
  }

  componentDidUpdate(prevProps) {
    if (typeof window === 'undefined') {
      return;
    }

    if (!prevProps.isOpen && this.props.isOpen) {
      window.addEventListener('click', this.handleClickOutside, true);
    } else if (prevProps.isOpen && !this.props.isOpen) {
      window.removeEventListener('click', this.handleClickOutside, true);
    }
  }

  componentDidMount() {
    if (typeof window === 'undefined') {
      return;
    }

    if (this.props.isOpen) {
      window.addEventListener('click', this.handleClickOutside, true);
    }
  }

  componentWillUnmount() {
    if (typeof window === 'undefined') {
      return;
    }

    window.removeEventListener('click', this.handleClickOutside, true);
  }

  render() {
    const {
      children,
      placement,
      isOpen,
      content,
      onContentBlur,
      onContentFocus,
      onContentClick,
      testId
    } = this.props;
    const popper = isOpen ? /*#__PURE__*/React.createElement(Popper, {
      placement: placement
    }, ({
      ref,
      style
    }) => /*#__PURE__*/React.createElement(Container, {
      onBlur: onContentBlur,
      onFocus: onContentFocus,
      onClick: onContentClick,
      innerRef: node => {
        this.containerRef = node;

        if (typeof ref === 'function') {
          ref(node);
        } else {
          ref.current = node;
        }
      },
      style: style,
      "data-testid": testId
    }, content)) : null;
    return /*#__PURE__*/React.createElement(Manager, null, /*#__PURE__*/React.createElement(Reference, null, ({
      ref
    }) => /*#__PURE__*/React.createElement(NodeResolver, {
      innerRef: node => {
        this.triggerRef = node;

        if (typeof ref === 'function') {
          ref(node);
        } else {
          ref.current = node;
        }
      }
    }, children)), popper);
  }

}

_defineProperty(InlineDialog, "defaultProps", {
  isOpen: false,
  onContentBlur: () => {},
  onContentClick: () => {},
  onContentFocus: () => {},
  onClose: () => {},
  placement: 'bottom-start'
});

export { InlineDialog as InlineDialogWithoutAnalytics };
const createAndFireEventOnAtlaskit = createAndFireEvent('atlaskit');
export default withAnalyticsContext({
  componentName: 'inlineDialog',
  packageName,
  packageVersion
})(withAnalyticsEvents({
  onClose: createAndFireEventOnAtlaskit({
    action: 'closed',
    actionSubject: 'inlineDialog',
    attributes: {
      componentName: 'inlineDialog',
      packageName,
      packageVersion
    }
  })
})(InlineDialog));