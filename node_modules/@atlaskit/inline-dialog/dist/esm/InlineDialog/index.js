import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _assertThisInitialized from "@babel/runtime/helpers/assertThisInitialized";
import _inherits from "@babel/runtime/helpers/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _defineProperty from "@babel/runtime/helpers/defineProperty";

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

import React, { Component } from 'react';
import NodeResolver from 'react-node-resolver';
import { createAndFireEvent, withAnalyticsContext, withAnalyticsEvents } from '@atlaskit/analytics-next';
import { Manager, Popper, Reference } from '@atlaskit/popper';
import { name as packageName, version as packageVersion } from '../version.json';
import { Container } from './styled';

var InlineDialog = /*#__PURE__*/function (_Component) {
  _inherits(InlineDialog, _Component);

  var _super = _createSuper(InlineDialog);

  function InlineDialog() {
    var _this;

    _classCallCheck(this, InlineDialog);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _defineProperty(_assertThisInitialized(_this), "handleClickOutside", function (event) {
      var _this$props = _this.props,
          isOpen = _this$props.isOpen,
          onClose = _this$props.onClose;

      if (event.defaultPrevented) {
        return;
      }

      var container = _this.containerRef;
      var trigger = _this.triggerRef;
      var target = event.target; // exit if we click outside but on the trigger â€” it can handle the clicks itself

      if (trigger && trigger.contains(target)) {
        return;
      } // call onClose if the click originated from outside the dialog


      if (isOpen && container && !container.contains(target)) {
        onClose && onClose({
          isOpen: false,
          event: event
        });
      }
    });

    return _this;
  }

  _createClass(InlineDialog, [{
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {
      if (typeof window === 'undefined') {
        return;
      }

      if (!prevProps.isOpen && this.props.isOpen) {
        window.addEventListener('click', this.handleClickOutside, true);
      } else if (prevProps.isOpen && !this.props.isOpen) {
        window.removeEventListener('click', this.handleClickOutside, true);
      }
    }
  }, {
    key: "componentDidMount",
    value: function componentDidMount() {
      if (typeof window === 'undefined') {
        return;
      }

      if (this.props.isOpen) {
        window.addEventListener('click', this.handleClickOutside, true);
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      if (typeof window === 'undefined') {
        return;
      }

      window.removeEventListener('click', this.handleClickOutside, true);
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      var _this$props2 = this.props,
          children = _this$props2.children,
          placement = _this$props2.placement,
          isOpen = _this$props2.isOpen,
          content = _this$props2.content,
          onContentBlur = _this$props2.onContentBlur,
          onContentFocus = _this$props2.onContentFocus,
          onContentClick = _this$props2.onContentClick,
          testId = _this$props2.testId;
      var popper = isOpen ? /*#__PURE__*/React.createElement(Popper, {
        placement: placement
      }, function (_ref) {
        var ref = _ref.ref,
            style = _ref.style;
        return /*#__PURE__*/React.createElement(Container, {
          onBlur: onContentBlur,
          onFocus: onContentFocus,
          onClick: onContentClick,
          innerRef: function innerRef(node) {
            _this2.containerRef = node;

            if (typeof ref === 'function') {
              ref(node);
            } else {
              ref.current = node;
            }
          },
          style: style,
          "data-testid": testId
        }, content);
      }) : null;
      return /*#__PURE__*/React.createElement(Manager, null, /*#__PURE__*/React.createElement(Reference, null, function (_ref2) {
        var ref = _ref2.ref;
        return /*#__PURE__*/React.createElement(NodeResolver, {
          innerRef: function innerRef(node) {
            _this2.triggerRef = node;

            if (typeof ref === 'function') {
              ref(node);
            } else {
              ref.current = node;
            }
          }
        }, children);
      }), popper);
    }
  }]);

  return InlineDialog;
}(Component);

_defineProperty(InlineDialog, "defaultProps", {
  isOpen: false,
  onContentBlur: function onContentBlur() {},
  onContentClick: function onContentClick() {},
  onContentFocus: function onContentFocus() {},
  onClose: function onClose() {},
  placement: 'bottom-start'
});

export { InlineDialog as InlineDialogWithoutAnalytics };
var createAndFireEventOnAtlaskit = createAndFireEvent('atlaskit');
export default withAnalyticsContext({
  componentName: 'inlineDialog',
  packageName: packageName,
  packageVersion: packageVersion
})(withAnalyticsEvents({
  onClose: createAndFireEventOnAtlaskit({
    action: 'closed',
    actionSubject: 'inlineDialog',
    attributes: {
      componentName: 'inlineDialog',
      packageName: packageName,
      packageVersion: packageVersion
    }
  })
})(InlineDialog));