import _defineProperty from "@babel/runtime/helpers/defineProperty";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

/** @jsx jsx */
import React, { forwardRef, memo } from 'react';
import { css, jsx } from '@emotion/core';
import { usePlatformLeafEventHandler } from '@atlaskit/analytics-next/usePlatformLeafEventHandler';
import noop from '@atlaskit/ds-lib/noop';
import { DN90A, N100A } from '@atlaskit/theme/colors';
import { useGlobalTheme } from '@atlaskit/theme/components';
import { layers } from '@atlaskit/theme/constants';
var packageName = "@atlaskit/blanket";
var packageVersion = "11.4.1";
var analyticsAttributes = {
  componentName: 'blanket',
  packageName: packageName,
  packageVersion: packageVersion
};
var baseStyle = css({
  position: 'fixed',
  bottom: 0,
  left: 0,
  right: 0,
  top: 0,
  pointerEvents: 'initial',
  opacity: 1,
  zIndex: layers.blanket()
});
var canClickThroughStyle = css({
  pointerEvents: 'none'
});
var invisible = css({
  opacity: 0
});
var lightBg = css({
  backgroundColor: N100A
});
var darkBg = css({
  backgroundColor: DN90A
});
var backgroundStyle = {
  light: lightBg,
  dark: darkBg
};
/**
 * __Blanket__
 *
 * A Blanket provides the overlay layer for components such as a modal dialog or a tooltip
 *
 * - [Examples](https://atlaskit.atlassian.com/examples/design-system/blanket/basic-usage)
 */

var Blanket = /*#__PURE__*/memo( /*#__PURE__*/forwardRef(function Blanket(_ref, ref) {
  var _ref$canClickThrough = _ref.canClickThrough,
      canClickThrough = _ref$canClickThrough === void 0 ? false : _ref$canClickThrough,
      _ref$isTinted = _ref.isTinted,
      isTinted = _ref$isTinted === void 0 ? false : _ref$isTinted,
      _ref$onBlanketClicked = _ref.onBlanketClicked,
      onBlanketClicked = _ref$onBlanketClicked === void 0 ? noop : _ref$onBlanketClicked,
      testId = _ref.testId,
      analyticsContext = _ref.analyticsContext;

  var _useGlobalTheme = useGlobalTheme(),
      mode = _useGlobalTheme.mode;

  var onBlanketClickedWithAnalytics = usePlatformLeafEventHandler(_objectSpread({
    fn: onBlanketClicked,
    action: 'clicked',
    analyticsData: analyticsContext
  }, analyticsAttributes));
  var onClick = canClickThrough ? undefined : onBlanketClickedWithAnalytics;
  return jsx("div", {
    role: "presentation",
    css: [baseStyle, !isTinted && invisible, canClickThrough && canClickThroughStyle, backgroundStyle[mode]],
    onClick: onClick,
    "data-testid": testId,
    ref: ref
  });
}));
Blanket.displayName = 'Blanket';
export default Blanket;