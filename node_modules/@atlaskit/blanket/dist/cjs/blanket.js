"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _typeof = require("@babel/runtime/helpers/typeof");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireWildcard(require("react"));

var _core = require("@emotion/core");

var _usePlatformLeafEventHandler = require("@atlaskit/analytics-next/usePlatformLeafEventHandler");

var _noop = _interopRequireDefault(require("@atlaskit/ds-lib/noop"));

var _colors = require("@atlaskit/theme/colors");

var _components = require("@atlaskit/theme/components");

var _constants = require("@atlaskit/theme/constants");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var packageName = "@atlaskit/blanket";
var packageVersion = "11.4.1";
var analyticsAttributes = {
  componentName: 'blanket',
  packageName: packageName,
  packageVersion: packageVersion
};
var baseStyle = (0, _core.css)({
  position: 'fixed',
  bottom: 0,
  left: 0,
  right: 0,
  top: 0,
  pointerEvents: 'initial',
  opacity: 1,
  zIndex: _constants.layers.blanket()
});
var canClickThroughStyle = (0, _core.css)({
  pointerEvents: 'none'
});
var invisible = (0, _core.css)({
  opacity: 0
});
var lightBg = (0, _core.css)({
  backgroundColor: _colors.N100A
});
var darkBg = (0, _core.css)({
  backgroundColor: _colors.DN90A
});
var backgroundStyle = {
  light: lightBg,
  dark: darkBg
};
/**
 * __Blanket__
 *
 * A Blanket provides the overlay layer for components such as a modal dialog or a tooltip
 *
 * - [Examples](https://atlaskit.atlassian.com/examples/design-system/blanket/basic-usage)
 */

var Blanket = /*#__PURE__*/(0, _react.memo)( /*#__PURE__*/(0, _react.forwardRef)(function Blanket(_ref, ref) {
  var _ref$canClickThrough = _ref.canClickThrough,
      canClickThrough = _ref$canClickThrough === void 0 ? false : _ref$canClickThrough,
      _ref$isTinted = _ref.isTinted,
      isTinted = _ref$isTinted === void 0 ? false : _ref$isTinted,
      _ref$onBlanketClicked = _ref.onBlanketClicked,
      onBlanketClicked = _ref$onBlanketClicked === void 0 ? _noop.default : _ref$onBlanketClicked,
      testId = _ref.testId,
      analyticsContext = _ref.analyticsContext;

  var _useGlobalTheme = (0, _components.useGlobalTheme)(),
      mode = _useGlobalTheme.mode;

  var onBlanketClickedWithAnalytics = (0, _usePlatformLeafEventHandler.usePlatformLeafEventHandler)(_objectSpread({
    fn: onBlanketClicked,
    action: 'clicked',
    analyticsData: analyticsContext
  }, analyticsAttributes));
  var onClick = canClickThrough ? undefined : onBlanketClickedWithAnalytics;
  return (0, _core.jsx)("div", {
    role: "presentation",
    css: [baseStyle, !isTinted && invisible, canClickThrough && canClickThroughStyle, backgroundStyle[mode]],
    onClick: onClick,
    "data-testid": testId,
    ref: ref
  });
}));
Blanket.displayName = 'Blanket';
var _default = Blanket;
exports.default = _default;