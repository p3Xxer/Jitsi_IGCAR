{"version":3,"sources":["GiphyVideoView.tsx"],"names":["mountedComponentsCount","appStateListenerAdded","latestAppState","AppState","currentState","appStateListener","appState","match","GiphyVideoManager","muteAll","addAppStateListener","addEventListener","removeAppStateListener","registerComponent","unregisterComponent","Math","max","GiphyVideoView","React","Component","componentDidMount","componentWillUnmount","render","props","playing","explanation"],"mappings":";;;;;;;AAAA;;AACA;;AAEA;;AACA;;AACA;;;;;;AAIA,IAAIA,sBAAsB,GAAG,CAA7B;AACA,IAAIC,qBAAqB,GAAG,KAA5B;AACA,IAAIC,cAA8B,GAAGC,sBAASC,YAA9C;;AAEA,SAASC,gBAAT,CAA0BC,QAA1B,EAAoD;AAClD,MAAIJ,cAAc,KAAK,QAAnB,IAA+BI,QAAQ,CAACC,KAAT,CAAe,qBAAf,CAAnC,EAA0E;AACxEC,yCAAkBC,OAAlB;AACD;;AACDP,EAAAA,cAAc,GAAGI,QAAjB;AACD;;AAED,SAASI,mBAAT,GAA+B;AAC7BR,EAAAA,cAAc,GAAGC,sBAASC,YAA1B;;AACAD,wBAASQ,gBAAT,CAA0B,QAA1B,EAAoCN,gBAApC;;AACAJ,EAAAA,qBAAqB,GAAG,IAAxB;AACD;;AAED,SAASW,sBAAT,GAAkC;AAChCT,wBAASQ,gBAAT,CAA0B,QAA1B,EAAoCN,gBAApC;;AACAJ,EAAAA,qBAAqB,GAAG,KAAxB;AACD;;AAED,SAASY,iBAAT,GAA6B;AAC3Bb,EAAAA,sBAAsB,IAAI,CAA1B;;AACA,MAAI,CAACC,qBAAL,EAA4B;AAC1BS,IAAAA,mBAAmB;AACpB;AACF;;AAED,SAASI,mBAAT,GAA+B;AAC7Bd,EAAAA,sBAAsB,GAAGe,IAAI,CAACC,GAAL,CAAS,CAAT,EAAYhB,sBAAsB,GAAG,CAArC,CAAzB;;AACA,MAAIA,sBAAsB,KAAK,CAA3B,IAAgCC,qBAApC,EAA2D;AACzDW,IAAAA,sBAAsB;AACvB;AACF;;AAEM,MAAMK,cAAN,SAA6BC,eAAMC,SAAnC,CAAsE;AAO3EC,EAAAA,iBAAiB,GAAG;AAClBP,IAAAA,iBAAiB;AAClB;;AAEDQ,EAAAA,oBAAoB,GAAG;AACrBP,IAAAA,mBAAmB;AACpB;;AAEDQ,EAAAA,MAAM,GAAG;AACP,wBAAO,6BAAC,oCAAD,EAA0B,KAAKC,KAA/B,CAAP;AACD;;AAjB0E;;;;gBAAhEN,c,eACQ;AACjBO,EAAAA,OAAO,EAAE,iCAAmB;AAC1BC,IAAAA,WAAW,EAAE;AADa,GAAnB;AADQ,C","sourcesContent":["import React from 'react'\nimport { AppState, AppStateStatus } from 'react-native'\n\nimport { NativeGiphyVideoView, NativeGiphyVideoViewProps } from './native/GiphyVideoView'\nimport { GiphyVideoManager } from './GiphyVideoManager'\nimport deprecatedPropType from './utils/deprecatedPropType'\n\nexport type GiphyVideoViewProps = NativeGiphyVideoViewProps\n\nlet mountedComponentsCount = 0\nlet appStateListenerAdded = false\nlet latestAppState: AppStateStatus = AppState.currentState\n\nfunction appStateListener(appState: AppStateStatus) {\n  if (latestAppState === 'active' && appState.match(/inactive|background/)) {\n    GiphyVideoManager.muteAll()\n  }\n  latestAppState = appState\n}\n\nfunction addAppStateListener() {\n  latestAppState = AppState.currentState\n  AppState.addEventListener('change', appStateListener)\n  appStateListenerAdded = true\n}\n\nfunction removeAppStateListener() {\n  AppState.addEventListener('change', appStateListener)\n  appStateListenerAdded = false\n}\n\nfunction registerComponent() {\n  mountedComponentsCount += 1\n  if (!appStateListenerAdded) {\n    addAppStateListener()\n  }\n}\n\nfunction unregisterComponent() {\n  mountedComponentsCount = Math.max(0, mountedComponentsCount - 1)\n  if (mountedComponentsCount === 0 && appStateListenerAdded) {\n    removeAppStateListener()\n  }\n}\n\nexport class GiphyVideoView extends React.Component<GiphyVideoViewProps, {}> {\n  static propTypes = {\n    playing: deprecatedPropType({\n      explanation: 'This property will be removed in v2, please use autoPlay instead',\n    }),\n  }\n\n  componentDidMount() {\n    registerComponent()\n  }\n\n  componentWillUnmount() {\n    unregisterComponent()\n  }\n\n  render() {\n    return <NativeGiphyVideoView {...this.props} />\n  }\n}\n"]}