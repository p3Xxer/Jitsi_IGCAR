{"version":3,"sources":["giphyMedia.ts"],"names":["BOOL_PROPS","USER_BOOL_PROPS","propToBool","obj","prop","Boolean","normalizeTag","tag","text","normalizeAssets","assets","newAssets","Object","entries","forEach","key","asset","width","parseInt","height","normalizeUser","user","newUser","normalizeVideo","video","normalizeMediaData","data","newData","id","String","images","tags","map","mediaId","makeGiphyMedia","rawMedia"],"mappings":"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","sourcesContent":["import type { Merge } from 'type-fest'\nimport type { IGif, IImages, IUser } from '@giphy/js-types'\n\nexport type GiphyMediaID = {\n  id: string\n}\n\nexport type GiphyMediaData = GiphyMediaID & IGif\n\nexport type GiphyMedia = GiphyMediaID & {\n  url: string\n  aspectRatio: number\n  isVideo: boolean\n  data: GiphyMediaData\n}\n\ntype GiphyVideo = Exclude<IGif['video'], undefined>\n\ntype RawAsset = Partial<{\n  height: any\n  size: string\n  url: string\n  width: any\n}>\n\ntype RawAssets = Record<keyof IImages & keyof GiphyVideo['assets'], RawAsset>\n\ntype RawTag = string | { text: string }\n\ntype RawUser = Merge<\n  IUser,\n  Partial<{\n    is_public: any\n    is_verified: any\n    suppress_chrome: any\n  }>\n>\n\ntype RawVideo = Merge<GiphyVideo, { assets?: RawAssets }>\n\nexport type RawGiphyMediaData = Merge<\n  GiphyMediaData,\n  {\n    images?: RawAssets\n    is_anonymous?: any\n    is_community?: any\n    is_dynamic?: any\n    is_featured?: any\n    is_hidden?: any\n    is_indexable?: any\n    is_preserve_size?: any\n    is_realtime?: any\n    is_removed?: any\n    is_sticker?: any\n    tags?: RawTag[]\n    user?: RawUser\n    video?: RawVideo\n  }\n>\n\nexport type RawGiphyMedia = Merge<GiphyMedia, { data: RawGiphyMediaData }>\n\nconst BOOL_PROPS = [\n  'is_anonymous',\n  'is_community',\n  'is_featured',\n  'is_hidden',\n  'is_indexable',\n  'is_preserve_size',\n  'is_realtime',\n  'is_removed',\n  'is_sticker',\n  'is_dynamic',\n] as const\n\nconst USER_BOOL_PROPS = ['suppress_chrome', 'is_public', 'is_verified'] as const\n\nconst propToBool = (obj: Record<string, any>) => (prop: string) => {\n  obj[prop] = Boolean(obj[prop])\n}\n\nfunction normalizeTag(tag: RawTag | string): string {\n  return typeof tag === 'string' ? tag : tag.text\n}\n\nfunction normalizeAssets(assets?: RawAssets): Partial<IImages> | Partial<GiphyVideo['assets']> {\n  const newAssets: Record<string, any> = { ...assets }\n\n  Object.entries(newAssets).forEach(([key, asset]) => {\n    newAssets[key] = {\n      ...asset,\n      width: parseInt(asset?.width, 10) || 0,\n      height: parseInt(asset?.height, 10) || 0,\n    }\n  })\n\n  return newAssets\n}\n\nfunction normalizeUser(user?: RawUser): IUser | undefined {\n  if (!user) {\n    return user\n  }\n\n  const newUser = { ...user }\n  USER_BOOL_PROPS.forEach(propToBool(newUser))\n  return newUser as IUser\n}\n\nfunction normalizeVideo(video?: RawVideo): GiphyVideo | undefined {\n  if (!video) {\n    return video\n  }\n\n  return {\n    ...video,\n    assets: normalizeAssets(video.assets),\n  } as GiphyVideo\n}\n\nfunction normalizeMediaData(data: RawGiphyMediaData): GiphyMediaData {\n  const newData = {\n    ...data,\n    id: String(data?.id),\n    images: normalizeAssets(data?.images),\n    tags: (data?.tags || []).map(normalizeTag),\n    user: normalizeUser(data?.user),\n    video: normalizeVideo(data?.video),\n  } as GiphyMediaData\n\n  BOOL_PROPS.forEach(propToBool(newData))\n  delete (newData.images as any)?.mediaId\n\n  return newData\n}\n\nexport function makeGiphyMedia(rawMedia: RawGiphyMedia): GiphyMedia {\n  return {\n    ...rawMedia,\n    data: normalizeMediaData(rawMedia.data),\n  }\n}\n"]}