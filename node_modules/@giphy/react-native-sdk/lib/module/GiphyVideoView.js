function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import React from 'react';
import { AppState } from 'react-native';
import { NativeGiphyVideoView } from './native/GiphyVideoView';
import { GiphyVideoManager } from './GiphyVideoManager';
import deprecatedPropType from './utils/deprecatedPropType';
let mountedComponentsCount = 0;
let appStateListenerAdded = false;
let latestAppState = AppState.currentState;

function appStateListener(appState) {
  if (latestAppState === 'active' && appState.match(/inactive|background/)) {
    GiphyVideoManager.muteAll();
  }

  latestAppState = appState;
}

function addAppStateListener() {
  latestAppState = AppState.currentState;
  AppState.addEventListener('change', appStateListener);
  appStateListenerAdded = true;
}

function removeAppStateListener() {
  AppState.addEventListener('change', appStateListener);
  appStateListenerAdded = false;
}

function registerComponent() {
  mountedComponentsCount += 1;

  if (!appStateListenerAdded) {
    addAppStateListener();
  }
}

function unregisterComponent() {
  mountedComponentsCount = Math.max(0, mountedComponentsCount - 1);

  if (mountedComponentsCount === 0 && appStateListenerAdded) {
    removeAppStateListener();
  }
}

export class GiphyVideoView extends React.Component {
  componentDidMount() {
    registerComponent();
  }

  componentWillUnmount() {
    unregisterComponent();
  }

  render() {
    return /*#__PURE__*/React.createElement(NativeGiphyVideoView, this.props);
  }

}

_defineProperty(GiphyVideoView, "propTypes", {
  playing: deprecatedPropType({
    explanation: 'This property will be removed in v2, please use autoPlay instead'
  })
});
//# sourceMappingURL=GiphyVideoView.js.map